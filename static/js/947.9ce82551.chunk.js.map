{"version":3,"file":"static/js/947.9ce82551.chunk.js","mappings":"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","sources":["hooks/usePlantDropableArea.js","pages/plantAssignment/WidgetLifecycle.jsx","pages/plantAssignment/dataHelpers.js","pages/plantAssignment/plantAssignmentToolbarNativeCta.jsx","pages/plantAssignment/DragAndDrop.jsx","pages/plantAssignment/plantAssignment.jsx","pages/plantAssignment/plantIndex.js"],"sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction ,setLoading} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default usePlantDropableArea;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { refreshWidgetData } from \"../../services/api/refreshService\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport { MSG_REFRESH_ERROR, MSG_REFRESH_SUCCESS } from \"../../utils/toastMessages\";\r\nimport store from \"../../store\"; // ✅ Import Redux store directly\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst WidgetLifecycle = () => {\r\n  const { handleDrop } = usePlantDropableArea();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  console.log(\"---[WidgetLifecycle]--- starts\");\r\n\r\n  const isAutoTriggeredRefresh = (trace) => {\r\n    return trace.some(\r\n      (line) =>\r\n        line.includes(\"UWA_Frame_Alone.js\") || line.includes(\"bundle-min.js\")\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!window.widget) return;\r\n\r\n    // console.log(\"[WidgetLifecycle] 📌 Registering `onRefresh` event...\");\r\n\r\n    const onRefresh = async () => {\r\n      const trace = new Error().stack.split(\"\\n\");\r\n\r\n      // ✅ Check if refresh was manually triggered\r\n      const userClickedRefresh = sessionStorage.getItem(\"userClickedRefresh\");\r\n\r\n      if (isAutoTriggeredRefresh(trace) && !userClickedRefresh) {\r\n        console.warn(\r\n          \"[WidgetLifecycle] ⛔ Auto-refresh detected. Ignoring unwanted `onRefresh`.\"\r\n        );\r\n        return; // ✅ Block auto-triggered refresh\r\n      }\r\n\r\n      // console.log(\"[WidgetLifecycle] 🔄 `onRefresh` triggered!\");\r\n      // ✅ Reset manual refresh flag so next refresh isn't blocked\r\n      sessionStorage.removeItem(\"userClickedRefresh\");\r\n      // console.log(\r\n      //   \"Stored Flag in widgt lifecycle:\",\r\n      //   sessionStorage.getItem(\"userClickedRefresh\")\r\n      // );\r\n\r\n      setLoading(true);\r\n\r\n      const latestState = store.getState();\r\n      const latestDraggedData =\r\n        latestState.droppedObject.droppedObjectData.initialDraggedData;\r\n\r\n      if (!latestDraggedData?.data?.items?.length) {\r\n        console.error(\r\n          \"[WidgetLifecycle] ⚠️ `initialDraggedData` is missing or invalid:\",\r\n          latestDraggedData\r\n        );\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // console.log(\r\n        //   \"[WidgetLifecycle] 🚀 Refreshing widget with latest data...\"\r\n        // );\r\n        await refreshWidgetData(latestDraggedData.data.items, handleDrop);\r\n      } catch (error) {\r\n        console.error(\"[WidgetLifecycle] ❌ Error during refresh:\", error);\r\n        showErrorToast(MSG_REFRESH_ERROR);\r\n      } finally {\r\n        setLoading(false); // ✅ Stop Loader when refresh completes\r\n        showSuccessToast(MSG_REFRESH_SUCCESS);\r\n      }\r\n    };\r\n    console.trace(\"[WidgetLifecycle] 🔄 `onRefresh` was called from:\");\r\n    window.widget.addEvent(\"onRefresh\", onRefresh);\r\n    // console.log(\r\n    //   \"[WidgetLifecycle] ✅ `onRefresh` event registered successfully\"\r\n    // );\r\n  }, []); // ✅ Runs only once\r\n\r\n  return loading ? <Loader/> : null;\r\n};\r\n\r\nexport default WidgetLifecycle;\r\n","// pages/revisionFloat/dataHelpers.js\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nexport const getCardData = (droppedObjectData) => {\r\n  if (!droppedObjectData || !droppedObjectData.cardData) {\r\n    return null;\r\n  }\r\n\r\n  const item = droppedObjectData.cardData;\r\n\r\n  let cardData = {\r\n    title: item.Title || \"N/A\",\r\n    type: item.Type || \"N/A\",\r\n    \"Maturity State\": item[\"Maturity State\"] || \"N/A\",\r\n    owner: item.Owner || \"N/A\",\r\n    \"Collaborative Space Title\": item[\"Collaborative Space Title\"] || \"N/A\",\r\n    Description: item.Description || \"N/A\",\r\n    \"Dropped Revision\": item[\"Dropped Revision\"] || \"N/A\",\r\n    \"Latest Released Revision\": item[\"Latest Released Revision\"] || \"N/A\",\r\n    \"CAD Format\": item[\"CAD Format\"] || \"N/A\",\r\n    imageURL:\r\n      item.imageURL ||\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\", // You might want a placeholder image URL\r\n  };\r\n\r\n  if (item.Type !== \"Document\") {\r\n    cardData.EIN = item.EIN || \"N/A\";\r\n    cardData[\"CAD Format\"] = item[\"CAD Format\"] || \"N/A\";\r\n  }\r\n  return cardData;\r\n};\r\n\r\nexport const getTableData = (asignedPlant) => {\r\n  if (!asignedPlant) return [];\r\n  return asignedPlant.map((plant) => ({\r\n    Plant: plant?.title || \"N/A\",\r\n    Seq: plant?.Seq || \"1\",\r\n    Status: \"Current\" || \"N/A\",\r\n    \"MFG Change\": plant?.MFGChange || \"N/A\",\r\n    \"MFG Status\": plant?.MFGStatus || \"N/A\",\r\n    Change: plant?.Change || \"N/A\",\r\n    \"Change Status\": plant?.ChangeStatus || \"N/A\",\r\n    \"Oracle Template\": plant.OracleTemplate || \"N/A\",\r\n    \"ERP Status\": \"Active\" || \"N/A\",\r\n    \"ERP Export\": \"Yes\" || \"N/A\",\r\n    \"Lead Plant\": false,\r\n    MBom: plant.MBOM ? \"Make\" : \"Buy\" || \"N/A\",\r\n    \"Sort Value\": \"\",\r\n  }));\r\n};\r\n\r\nexport const getUniqueTableData = (uniqueData) => {\r\n  if (!uniqueData) return [];\r\n  return uniqueData.map((plant) => ({\r\n    \"Available Plant\": plant?.title || \"N/A\",\r\n  }));\r\n};\r\n\r\nexport const tableColumns = (CAName) => [\r\n  { accessorKey: \"Plant\", header: \"Plant\" },\r\n  { accessorKey: \"Seq\", header: \"Seq\" },\r\n  {\r\n    accessorKey: \"MBom\",\r\n    header: \"MBom\",\r\n    cell: ({ row, getValue, table }) => {\r\n      const handleDropdownChange = (e) => {\r\n        if (!CAName) return; // Prevent changes when disabled\r\n        const updatedValue = e.target.value;\r\n\r\n        // Update the table data state here\r\n        const updatedData = table\r\n          .getRowModel()\r\n          .rows.map((r) =>\r\n            r.id === row.id ? { ...r.original, MBom: updatedValue } : r.original\r\n          );\r\n\r\n        table.options.meta?.updateTableData(updatedData); // Call custom table update function\r\n      };\r\n\r\n      return (\r\n        <select\r\n          value={getValue()}\r\n          onChange={handleDropdownChange}\r\n          disabled={!CAName} // Disable dropdown if CAName is false\r\n          className={`appearance-none bg-transparent border-none cursor-pointer focus:outline-none`}\r\n          style={{\r\n            ...(CAName === false && { appearance: \"none\" }), // Apply appearance: none only if CAName is false\r\n            width: \"70%\",\r\n            padding: \"5px\",\r\n            fontSize: \"14px\",\r\n            color: \"#333\",\r\n            background: \"none\",\r\n            border: \"none\",\r\n            textAlign: \"left\",\r\n          }}\r\n          onMouseOver={(e) => {\r\n            if (CAName) e.target.style.border = \"1px solid #ccc\";\r\n          }}\r\n          onMouseOut={(e) => {\r\n            if (CAName) e.target.style.border = \"none\";\r\n          }}\r\n        >\r\n          <option value=\"Make\">Make</option>\r\n          <option value=\"Buy\">Buy</option>\r\n        </select>\r\n      );\r\n    },\r\n  },\r\n  { accessorKey: \"Status\", header: \"Status\" },\r\n  { accessorKey: \"MFG Change\", header: \"MFG Change\" },\r\n  { accessorKey: \"MFG Status\", header: \"MFG Status\" },\r\n  { accessorKey: \"Change\", header: \"Change\" },\r\n  { accessorKey: \"Change Status\", header: \"Change Status\" },\r\n  { accessorKey: \"Oracle Template\", header: \"Oracle Template\" },\r\n  { accessorKey: \"ERP Status\", header: \"ERP Status\" },\r\n  { accessorKey: \"ERP Export\", header: \"ERP Export\" },\r\n  { accessorKey: \"Lead Plant\", header: \"Lead Plant\" },\r\n\r\n  { accessorKey: \"Sort Value\", header: \"Sort Value\" },\r\n];\r\n\r\nexport const uniqueColumns = [\r\n  { accessorKey: \"Available Plant\", header: \"Available Plant\" },\r\n];\r\n\r\n// export function processErrorObj(\r\n//   errorObj,\r\n//   assignedPlant,\r\n//   uniquePlant,\r\n//   updatedAssignedClasses\r\n// ) {\r\n//   console.log(\"Assigned Plants are:\", assignedPlant);\r\n//   console.log(\"unique Plants are:\", uniquePlant);\r\n//   errorObj.forEach((item) => {\r\n//     if (item.type === \"New\") {\r\n//       // Remove from assignedPlant\r\n\r\n//       assignedPlant = assignedPlant.filter(\r\n//         (plant) => plant.title !== item.title\r\n//       );\r\n\r\n//       // Add to uniquePlant if not already present\r\n//       if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n//         uniquePlant.push(item);\r\n//       }\r\n//     } else if (item.type === \"Update\") {\r\n//       // Modify mbom to \"buy\" in assignedPlant\r\n//       assignedPlant = assignedPlant.map((plant) =>\r\n//         plant.title === item.title ? { ...plant, MBom: \"buy\" } : plant\r\n//       );\r\n//     }\r\n//   });\r\n\r\n//   // Update the table (assuming a render function exists)\r\n\r\n//   return { assignedPlant, uniquePlant };\r\n// }\r\n\r\nexport function processErrorObj(\r\n  errorObj,\r\n  assignedPlant,\r\n  updatedAssignedClasses,\r\n  uniquePlant\r\n) {\r\n  console.log(\"Assigned Plants are:\", assignedPlant);\r\n  console.log(\"unique Plants are:\", uniquePlant);\r\n  errorObj.forEach((item) => {\r\n    if (item.type === \"New\") {\r\n      // Remove from assignedPlant\r\n\r\n      updatedAssignedClasses = updatedAssignedClasses.filter(\r\n        (plant) => plant.title !== item.title\r\n      );\r\n\r\n      // Add to uniquePlant if not already present\r\n      if (!uniquePlant.some((plant) => plant.title === item.title)) {\r\n        uniquePlant.push(item);\r\n      }\r\n    } else if (item.type === \"Update\") {\r\n      // Modify mbom to \"buy\" in assignedPlant\r\n      updatedAssignedClasses = updatedAssignedClasses.map((plant) =>\r\n        plant.title === item.title ? { ...plant, MBOM: \"false\" } : plant\r\n      );\r\n    }\r\n  });\r\n\r\n  // Update the table (assuming a render function exists)\r\n\r\n  return { updatedAssignedClasses, uniquePlant };\r\n}\r\n\r\nexport const formattedFinalMessage = (finalMessage) => {\r\n  if (!finalMessage) return \"An error occurred.\";\r\n\r\n  const messageList = finalMessage\r\n    .split(\"\\n\")\r\n    .filter((msg) => msg.trim() !== \"\");\r\n\r\n  const handleCopy = () => {\r\n    const textToCopy = messageList.map((msg) => `- ${msg}`).join(\"\\n\");\r\n    navigator.clipboard.writeText(textToCopy);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        userSelect: \"text\",\r\n        cursor: \"text\",\r\n        position: \"relative\",\r\n        paddingRight: \"40px\",\r\n      }}\r\n    >\r\n      <strong>Errors:</strong>\r\n      <button\r\n        onClick={handleCopy}\r\n        style={{\r\n          position: \"absolute\",\r\n          right: \"10px\",\r\n          top: \"-12px\",\r\n          background: \"none\",\r\n          border: \"none\",\r\n          cursor: \"pointer\",\r\n          fontSize: \"16px\",\r\n          color: \"grey\",\r\n        }}\r\n      >\r\n        <FaRegCopy size={12} />\r\n      </button>\r\n      <ol>\r\n        {messageList.map((msg, index) => (\r\n          <li key={index}>{msg}</li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Popup from \"../../components/Popup/Popup\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport {\r\n  MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_SAVEPRODUCT_RELEASED_ERROR,\r\n} from \"../../utils/toastMessages\";\r\n\r\nconst PlantAssignmentToolbarNativeCta = ({\r\n  onAddPlant,\r\n  addedPlant,\r\n  onSave,\r\n  onRemove,\r\n  uniquedata,\r\n  uniqueColumn,\r\n  CAName,\r\n  state,\r\n}) => {\r\n  const { showWarningToast } = useToast();\r\n  const [AddedItem, setAddedItem] = useState([]);\r\n  const [addedItemData, setAddedItemData] = useState([]);\r\n\r\n  const handleSaveClick = () => {\r\n    if (onSave && CAName) {\r\n      onSave();\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to update pLANTS, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to update, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n    // When save button is clicked, call onSave passed as prop\r\n    // onSave is passed with tableData from parent\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    if (onRemove) {\r\n      onRemove();\r\n    }\r\n  };\r\n\r\n  console.log(\"[Unique Table Data]:\", uniquedata);\r\n\r\n  // useEffect(() => {\r\n  //   onAddPlant(addedItemData);\r\n  //   console.log(\"Data Passed\");\r\n  //   // addedPlant(AddedItem);\r\n  // }, [addedItemData]);\r\n\r\n  const handleData = (data) => {\r\n    console.log(data);\r\n    setAddedItem(data);\r\n    if (data.length > 0) {\r\n      const newItems = data.map((title) => ({\r\n        title: title, // Use the title as Plant (or replace with actual data)\r\n        Seq: \"1\",\r\n        Status: \"Current\",\r\n        \"MFG Change\": \"N/A\",\r\n        \"MFG Status\": \"N/A\",\r\n        Change: \"N/A\",\r\n        \"Change Status\": \"N/A\",\r\n        \"Oracle Template\": \"N/A\",\r\n        \"ERP Status\": \"Active\",\r\n        \"ERP Export\": \"Yes\",\r\n        \"Lead Plant\": \"false\",\r\n        MBom: \"Buy\",\r\n        \"Sort Value\": \"\",\r\n      }));\r\n      onAddPlant(newItems);\r\n      setAddedItemData(newItems);\r\n      addedPlant(data);\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   // if (AddedItem.length > 0) {\r\n  //   //   const newItems = AddedItem.map((title) => ({\r\n  //   //     title: title, // Use the title as Plant (or replace with actual data)\r\n  //   //     Seq: \"1\",\r\n  //   //     Status: \"Current\",\r\n  //   //     MFG_Change: \"\",\r\n  //   //     MFG_Status: \"\",\r\n  //   //     Change: \"\",\r\n  //   //     Change_Status: \"\",\r\n  //   //     Oracle_Template: \"\",\r\n  //   //     \"ERP Status\": \"Active\",\r\n  //   //     \"ERP Export\": \"Yes\",\r\n  //   //     \"Lead Plant\": \"false\",\r\n  //   //     MBom: \"Buy\",\r\n  //   //     \"Sort Value\": \"\",\r\n  //   //   }));\r\n  //   //   onAddPlant(newItems);\r\n  //   //   setAddedItemData(newItems);\r\n  //   //   addedPlant(AddedItem);\r\n  //   // }\r\n  // }, [AddedItem]);\r\n\r\n  console.log(\"Added item data:\", addedItemData);\r\n\r\n  return (\r\n    <div className=\"d-flex cta-absolute\">\r\n      <Popup\r\n        data={uniquedata}\r\n        buttonText=\"Add Plants\"\r\n        columns={uniqueColumn}\r\n        CAName={CAName}\r\n        addedItem={handleData}\r\n        state={state}\r\n      />\r\n      <button\r\n        className=\"btn btn-outline-success btn-lg m-2\"\r\n        onClick={handleSaveClick}\r\n      >\r\n        Save\r\n      </button>\r\n      <button\r\n        className=\"btn btn-outline-danger btn-lg m-2\"\r\n        onClick={handleRemove}\r\n      >\r\n        Remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlantAssignmentToolbarNativeCta;\r\n","import React, { useEffect } from \"react\";\r\nimport \"../../components/DragAndDrop/DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport SearchInput from \"../../components/SearchInput/SearchInput\";\r\nimport useInterComSearch from \"../../hooks/useInterComSearch\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropComponent = () => {\r\n  const {  handleDrop } = usePlantDropableArea();\r\n  const { performSearch } = useInterComSearch();\r\n\r\n  const handleSearch = (searchText) => {\r\n    const searchOpts = {\r\n      title: \"Search\",\r\n      role: \"\",\r\n      mode: \"furtive\",\r\n      default_with_precond: true,\r\n      precond:\r\n        'flattenedtaxonomies:\"types/VPMReference\" OR flattenedtaxonomies:\"types/Raw_Material\" OR flattenedtaxonomies:\"types/Document\"',\r\n      show_precond: false,\r\n      multiSel: false,\r\n      idcard_activated: false,\r\n      select_result_max_idcard: false,\r\n      itemViewClickHandler: \"\",\r\n      search_delegation: \"3dsearch\",\r\n    };\r\n\r\n    const handleSearchResults = (selectedObjects) => {\r\n      console.log(\"Selected objects:\", selectedObjects);\r\n      console.log(\"objectId: selectedObjects[0].id\", selectedObjects[0].id);\r\n      if (\r\n        selectedObjects &&\r\n        selectedObjects.length > 0 &&\r\n        selectedObjects[0].id\r\n      ) {\r\n        handleDrop([\r\n          {\r\n            objectId: selectedObjects[0].id,\r\n            objectType: selectedObjects[0][\"ds6w:type_value\"],\r\n          },\r\n        ]);\r\n      } else {\r\n        console.warn(\"No objectId found in selected objects\");\r\n      }\r\n    };\r\n\r\n    performSearch(searchText, searchOpts, handleSearchResults);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"droppable-container mt-4\"\r\n      >\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n        <SearchInput onSearch={handleSearch} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropComponent;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CardComponent from \"../../components/Card/Card\";\r\nimport { Image } from \"react-bootstrap\";\r\nimport \"./plantAssignment.css\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\nimport CardWithDragAndDrop from \"../../components/Card/cardwithdraganddrop\";\r\nimport { FaRegCopy } from \"react-icons/fa\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setIsDropped,\r\n  setPlantObjectData,\r\n} from \"../../store/droppedObjectSlice\";\r\nimport {\r\n  formattedFinalMessage,\r\n  getCardData,\r\n  getTableData,\r\n  getUniqueTableData,\r\n  processErrorObj,\r\n  tableColumns,\r\n  uniqueColumns,\r\n} from \"./dataHelpers\";\r\nimport useToast from \"../../hooks/useToast\";\r\n// import { MSG_WIDGET_RESET_SUCCESS } from \"../../utils/toastMessages\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport { saveData } from \"../../services/api/PlantAssignment/saveTableDataService\";\r\nimport PlantAssignmentToolbarNativeCta from \"./plantAssignmentToolbarNativeCta\";\r\nimport { MSG_SAVE_FAILURE, MSG_SAVE_SUCCESS } from \"../../utils/toastMessages\";\r\nimport { clearAllListeners } from \"@reduxjs/toolkit\";\r\nimport { faClipboardQuestion } from \"@fortawesome/free-solid-svg-icons\";\r\nimport DragAndDropComponent from \"./DragAndDrop\";\r\n\r\nconst PlantAssignment = () => {\r\n  const { initializeDroppableArea, loading } = usePlantDropableArea();\r\n  const [tableKey, setTableKey] = useState(0);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [assignedPlant, setAssignedPlant] = useState([]);\r\n  const [uniqueData, setUniqueData] = useState([]);\r\n  // const [addedItem, setAddedItem] = useState([]);\r\n  const [addedDataFromToolbar, setAddedDataFromToolbar] = useState([]);\r\n  const [isTableLoading, setIsTableLoading] = useState(false);\r\n  const [screenLoader, setScreenLoader] = useState(false);\r\n  const [isCardDataAvailable, setIsCardDataAvailable] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const handleSave = async () => {\r\n    console.log(\"OnSave is Called with the TableData\", tableData);\r\n    // Pass the current tableData to the onSave function\r\n\r\n    setScreenLoader(true);\r\n    await onSave(tableData); // Pass tableData when calling onSave\r\n  };\r\n  const handleRemove = async () => {\r\n    console.log(\"Selected Table Rows:\", selectedTableRows);\r\n    console.log(\"handleRemove is Called with the TableData\", tableData);\r\n\r\n    if (selectedTableRows.length > 0) {\r\n      // Extract IDs or titles of selected rows\r\n      const selectedTitles = selectedTableRows.map((row) => row.Plant);\r\n      console.log(\"Selected Titles:\", selectedTitles);\r\n\r\n      // // Filter out selected rows from assignedPlant and update tableData\r\n      // const updatedAssignedPlant = assignedPlant.filter(\r\n      //   (row) => !selectedTitles.includes(row.title)\r\n      // );\r\n      // console.log(\"Updated Assigned Plant:\", updatedAssignedPlant);\r\n\r\n      // Extract filtered-out rows to add them back to uniqueData\r\n      // const removedPlants = assignedPlant.filter((row) =>\r\n      //   selectedTitles.includes(row.title)\r\n      // );\r\n      const removedTitles = selectedTitles.map((title) => ({\r\n        title: title,\r\n      }));\r\n      console.log(\"Removed Titles:\", removedTitles);\r\n      const updatedTableData = tableData.filter(\r\n        (row) => !selectedTitles.includes(row.Plant)\r\n      );\r\n      console.log(\"updateTableData\", updateTableData);\r\n      if (updateTableData) {\r\n        setTableData(updatedTableData);\r\n        setTableKey((prevKey) => prevKey + 1); // Update table key\r\n      }\r\n\r\n      // // Update state\r\n      // // setAssignedPlant(updatedAssignedPlant); // Updated tableData\r\n      setUniqueData((prevUniquePlants) => [\r\n        ...prevUniquePlants,\r\n        ...removedTitles,\r\n      ]); // Add removed items back to uniqueData\r\n    } else {\r\n      alert(\"Please select at least one row to remove.\");\r\n    }\r\n  };\r\n\r\n  const handleAdded = (data) => {\r\n    console.log(\"Data Received\");\r\n    setAddedDataFromToolbar(data);\r\n    console.log(\"[Plant Assignment] Table data\", tableData);\r\n    console.log(\"Added Data from Toolbar\", data);\r\n    setTableData((prev) => [\r\n      ...data.map(({ title, ...rest }) => ({ Plant: title, ...rest })),\r\n      ...prev,\r\n    ]);\r\n    setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  };\r\n  const handleUnique = (data) => {\r\n    console.log(\"The data received from Child is:\", data);\r\n    const updatedTableData = uniqueTableData.filter(\r\n      (row) =>\r\n        !data.find((selectedRow) => selectedRow === row[\"Available Plant\"])\r\n    );\r\n    console.log(\"Updated Table Data after unique:\", updatedTableData);\r\n    if (updatedTableData) {\r\n      const transformedData = updatedTableData.map((item) => ({\r\n        title: item[\"Available Plant\"],\r\n      }));\r\n\r\n      console.log(transformedData);\r\n      setUniqueData(transformedData);\r\n    }\r\n  };\r\n\r\n  console.log(\"Table Data after Adding:\", tableData);\r\n  const selectedTableRows = useSelector(\r\n    (state) => state.droppedObject.selectedTableRows\r\n  );\r\n  // Access Redux store\r\n  const droppedObjectData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData\r\n  );\r\n  console.log(\"droppedObjectData\", droppedObjectData);\r\n\r\n  const loadingParentDetails = useSelector(\r\n    (state) => state.droppedObject.loadingParentDetails\r\n  );\r\n  console.log(\"Parents Loading State:\", loadingParentDetails);\r\n  const proposedChanges = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.proposedChanges\r\n  );\r\n  console.log(\"Proposed Changes are:\", proposedChanges);\r\n\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const allPlants = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.allPlants\r\n  );\r\n  console.log(\"[PlantAssignment] plant object data: \", allPlants);\r\n\r\n  const uniquePlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.uniquePlants\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Plants:\", uniquePlant);\r\n  useEffect(() => {\r\n    setUniqueData(uniquePlant);\r\n  }, [uniquePlant]);\r\n  const asignedPlant = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.initialAssignedPlants\r\n  );\r\n  console.log(\"The Assigned Plants are:\", asignedPlant);\r\n  const productChildren = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.productChildren\r\n  );\r\n  console.log(\"[Plant Assignment] Product Children:\", productChildren);\r\n  const CAName = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.CAName\r\n  );\r\n  console.log(\"[plant Assignment] CAName:\", CAName);\r\n\r\n  const headers = useSelector(\r\n    (state) => state.droppedObject.plantObjectData.headers\r\n  );\r\n  console.log(\"[Plant Assignment] Headers are: \", headers);\r\n\r\n  // Updated: Function to update table data when dropdown changes\r\n  const updateTableData = (updatedData) => {\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  console.log(\"Tanble Data is:\", tableData);\r\n  // Trigger re-render of ReusableTable by changing the key\r\n  useEffect(() => {\r\n    if (tableData.length >= 0) {\r\n      setTableKey((prevKey) => prevKey + 1); // Increment the key to trigger a re-render\r\n    }\r\n  }, [tableData]); // Runs whenever tableData changes\r\n  if (droppedObjectData.cardData && droppedObjectData.initialDraggedData) {\r\n    var state = droppedObjectData.cardData[\"Maturity State\"];\r\n    var type = droppedObjectData.initialDraggedData.objectType;\r\n  }\r\n\r\n  const [dupInitialAssignedClasses, setDupInitialAssignedClasses] =\r\n    useState(asignedPlant);\r\n  console.log(\r\n    \"Duplicate Initial Assigned Classes are:\",\r\n    dupInitialAssignedClasses\r\n  );\r\n  useEffect(() => {\r\n    setDupInitialAssignedClasses(asignedPlant);\r\n    setAssignedPlant(asignedPlant);\r\n  }, [asignedPlant]);\r\n  const onSave = async (tableData) => {\r\n    let updatedItems = {};\r\n    // let DupInitialAssignedClasses = [...asignedPlant]; // Clone the initial array to avoid direct mutation\r\n    const classesToBeClassified = [];\r\n\r\n    console.log(\"Table Data\", tableData);\r\n    console.log(\"Before DupInitialAssignedClasses:\", dupInitialAssignedClasses);\r\n    let finalArray = [];\r\n    // Create a new array with updated classes instead of mutating\r\n    let updatedAssignedClasses = dupInitialAssignedClasses.map((intclass) => {\r\n      let updatedClass = { ...intclass }; // Shallow clone to avoid modifying the original object\r\n\r\n      tableData.forEach((tableItem) => {\r\n        let finalObj = {};\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (updatedClass.title === tableItem.Plant) {\r\n          const MBOMValue = updatedClass.MBOM ? \"Make\" : \"Buy\";\r\n\r\n          // Update only if MBOMValue has changed\r\n          if (MBOMValue !== tableItem.MBom) {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = tableItem.MBom === \"Make\";\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n              finalObj.MBOMValue = tableItem.MBom === \"Make\";\r\n            }\r\n            updatedClass.MBOM = tableItem.MBom === \"Make\"; // Modify the cloned object\r\n            finalObj = {\r\n              ...finalObj,\r\n              id: classid,\r\n              title: tableItem.Plant,\r\n              Type: \"Update\",\r\n            };\r\n            finalArray.push(finalObj);\r\n          }\r\n        }\r\n      });\r\n      return updatedClass; // Return updated or unchanged class object\r\n    });\r\n\r\n    // Find additional rows to classify\r\n    tableData.forEach((tableItem) => {\r\n      const matchedClass = dupInitialAssignedClasses.find(\r\n        (initialClass) => initialClass.title === tableItem.Plant\r\n      );\r\n\r\n      if (!matchedClass) {\r\n        const plantName = tableItem.Plant.replace(\"Plant\", \"\").replace(\r\n          /\\s+/g,\r\n          \"\"\r\n        );\r\n        const classid = allPlants.find(\r\n          (classitem) => classitem.title === tableItem.Plant\r\n        )?.id;\r\n\r\n        if (classid) {\r\n          let classObject = { id: classid, title: tableItem.Plant };\r\n          let finalObj = {};\r\n          classesToBeClassified.push(classid);\r\n\r\n          if (tableItem.MBom === \"Make\") {\r\n            if (/^\\d/.test(plantName)) {\r\n              updatedItems[`MBOM${plantName}`] = true;\r\n              finalObj.MBOMName = `MBOM${plantName}`;\r\n            } else {\r\n              updatedItems[`${plantName}MBOM`] = true;\r\n              finalObj.MBOMName = `${plantName}MBOM`;\r\n            }\r\n            classObject.MBOM = true;\r\n            finalObj.MBOMValue = true;\r\n          } else {\r\n            classObject.MBOM = false;\r\n            finalObj.MBOMValue = false;\r\n          }\r\n\r\n          updatedAssignedClasses.push(classObject);\r\n          finalObj = {\r\n            ...finalObj,\r\n            id: classid,\r\n            title: tableItem.Plant,\r\n            Type: \"New\",\r\n          };\r\n          finalArray.push(finalObj);\r\n        }\r\n      }\r\n    });\r\n    //---------------\r\n    let rowstoDelete = [];\r\n    dupInitialAssignedClasses.forEach((initialClass) => {\r\n      const isNotInTableData = !tableData.some(\r\n        (tableItem) => tableItem.Plant === initialClass.title\r\n      );\r\n      if (isNotInTableData) {\r\n        const classid = allPlants.find(\r\n          (classItem) => classItem.title === initialClass.title\r\n        )?.id;\r\n        if (classid) {\r\n          rowstoDelete.push(classid);\r\n        }\r\n      }\r\n    });\r\n\r\n    updatedAssignedClasses = updatedAssignedClasses.filter(\r\n      (classItem) => !rowstoDelete.includes(classItem.id)\r\n    );\r\n\r\n    console.log(\"Rows getting deleted rowstoDelete:\", rowstoDelete);\r\n    //Need to pass this is savetable function\r\n    //---------------\r\n\r\n    console.log(\"After DupInitialAssignedClasses:\", updatedAssignedClasses);\r\n    console.log(\"Classes to be Classified:\", classesToBeClassified);\r\n    console.log(\"Updated Items:\", updatedItems);\r\n    console.log();\r\n\r\n    // Call services with updated data\r\n    const result = await saveData(\r\n      updatedItems,\r\n      classesToBeClassified,\r\n      updatedAssignedClasses,\r\n      headers,\r\n      droppedObjectData.initialDraggedData?.data?.items[0].objectId,\r\n      allPlants,\r\n      productChildren,\r\n      type,\r\n      rowstoDelete,\r\n      finalArray,\r\n      proposedChanges\r\n    );\r\n\r\n    if (result.success) {\r\n      setScreenLoader(false);\r\n      console.log(\"Save result:\", result);\r\n      if (result.Finalmessage === \"\" || result.Finalmessage == null) {\r\n        showSuccessToast(MSG_SAVE_SUCCESS);\r\n      } else {\r\n        // Usage\r\n        showErrorToast(formattedFinalMessage(result.Finalmessage), {\r\n          autoClose: false,\r\n          closeOnClick: false,\r\n        });\r\n      }\r\n      let finalobj = [];\r\n      if (result.ErrorObj && Object.keys(result.ErrorObj).length > 0) {\r\n        let response = processErrorObj(\r\n          result.ErrorObj,\r\n          assignedPlant,\r\n          updatedAssignedClasses,\r\n          uniquePlant\r\n        );\r\n        console.log(\"response is \", response);\r\n        if (response) {\r\n          setUniqueData(response.uniquePlant);\r\n          //setAssignedPlant(response.assignedPlant);\r\n          finalobj = response.updatedAssignedClasses;\r\n        }\r\n      } else {\r\n        finalobj = updatedAssignedClasses;\r\n      }\r\n\r\n      if (finalobj) {\r\n        // change format of final object as the asignedPlant\r\n        setAssignedPlant(finalobj);\r\n        setDupInitialAssignedClasses(finalobj);\r\n      }\r\n    } else {\r\n      setScreenLoader(false);\r\n      showErrorToast(MSG_SAVE_FAILURE);\r\n    }\r\n\r\n    // showSuccessToast(MSG_SAVE_SUCCESS);\r\n    // alert(\"Save action triggered. Check console for details.\");\r\n  };\r\n\r\n  // Effect to initialize the droppable area\r\n  useEffect(() => {\r\n    if (!isDropped) {\r\n      initializeDroppableArea();\r\n    }\r\n  }, [isDropped, initializeDroppableArea]);\r\n\r\n  // Effect to set isTableLoading based on loadingParentDetails\r\n  useEffect(() => {\r\n    setIsTableLoading(loadingParentDetails);\r\n  }, [loadingParentDetails]);\r\n\r\n  // Update table data when droppedObjectData changes\r\n  const newTableData = useMemo(\r\n    () => getTableData(assignedPlant),\r\n    [assignedPlant]\r\n  );\r\n\r\n  const uniqueTableData = useMemo(\r\n    () => getUniqueTableData(uniqueData),\r\n    [uniqueData]\r\n  );\r\n  console.log(\"[Plant Assignment] Unique Table Data:\", uniqueTableData);\r\n\r\n  // Update table data and reset isTableLoading when newTableData changes\r\n  useEffect(() => {\r\n    if (newTableData.length >= 0) {\r\n      console.log(\"New Table Data:\", newTableData);\r\n      setTableData(newTableData);\r\n      setTableKey((prevKey) => prevKey + 1); // Update table key\r\n    }\r\n  }, [newTableData]);\r\n\r\n  // useEffect(() => {\r\n  //   if (addedDataFromToolbar.length > 0) {\r\n  //     console.log(\"[Plant Assignment] Table data\", tableData);\r\n  //     console.log(\"Added Data from Toolbar\", addedDataFromToolbar);\r\n  //     setAssignedPlant((prev) => [...addedDataFromToolbar, ...prev]);\r\n  //     setTableKey((prevKey) => prevKey + 1); // Update table key\r\n  //   }\r\n  // }, [addedDataFromToolbar]);\r\n\r\n  // Process card data\r\n  const cardData = useMemo(\r\n    () => getCardData(droppedObjectData),\r\n    [droppedObjectData]\r\n  );\r\n  console.log(cardData);\r\n\r\n  useEffect(() => {\r\n    setIsCardDataAvailable(!!cardData);\r\n  }, [cardData]);\r\n\r\n  // Define columns for the table\r\n  const columns = useMemo(() => tableColumns(CAName), [CAName]);\r\n\r\n  const uniqueColumn = useMemo(() => uniqueColumns, []);\r\n\r\n  const handleHomeClick = () => {\r\n    initializeDroppableArea(); // Reset the droppable area\r\n    // dispatch(false);\r\n    dispatch(setIsDropped(false));\r\n    dispatch(\r\n      setDroppedObjectData({\r\n        cardData: {},\r\n        parentDetails: [],\r\n        versions: [],\r\n        initialDraggedData: [],\r\n      })\r\n    ); // Clear Redux state\r\n    dispatch(\r\n      setPlantObjectData({\r\n        allPlants: [],\r\n        initialAssignedPlants: [],\r\n        uniquePlants: [],\r\n        productChildren: [],\r\n        CAName: false,\r\n        headers: {},\r\n      })\r\n    );\r\n\r\n    setTableData([]); // Clear local table data\r\n    setIsCardDataAvailable(false);\r\n    // showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n  };\r\n  useEffect(() => {\r\n    console.log(\"[PlantAssignment] State Changes:\", {\r\n      loading,\r\n      loadingParentDetails,\r\n      isDropped,\r\n    });\r\n  }, [loading, loadingParentDetails, isDropped]);\r\n\r\n  return (\r\n    <>\r\n      {screenLoader && (\r\n        <div className=\"loading-overlay\">\r\n          <Loader />\r\n          <p>Saving...</p>\r\n        </div>\r\n      )}\r\n      {/* Show DragAndDropComponent initially and if not loading and nothing is dropped */}\r\n      {!isDropped && !loading && !isTableLoading && <DragAndDropComponent />}\r\n\r\n      {/* Content Wrapper - show if not initially loading or if card data is available */}\r\n      {isDropped && (\r\n        <>\r\n          {/* Show initial loader when loading is true */}\r\n          {loading && <Loader />}\r\n          <div className=\"content-wrapper py-3 border-bottom\">\r\n            <div className=\"d-flex \">\r\n              <div className=\" p-0 pt-4\">\r\n                <Image\r\n                  src=\"https://thewhitechamaleon.github.io/testrapp/images/home.png\"\r\n                  alt=\"home-icon\"\r\n                  className=\"home-icon\"\r\n                  onClick={handleHomeClick}\r\n                />\r\n              </div>\r\n              {/* Always show card data if available */}\r\n              {cardData && <CardWithDragAndDrop data={cardData} />}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Table Loader - show only when isTableLoading is true */}\r\n          {isTableLoading ? (\r\n            <div className=\"loading-indicator mt-5\">\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <div className=\"wrapper-cta\">\r\n                <PlantAssignmentToolbarNativeCta\r\n                  uniquedata={uniqueTableData}\r\n                  data={tableData}\r\n                  uniqueColumn={uniqueColumn}\r\n                  CAName={CAName}\r\n                  onAddPlant={handleAdded}\r\n                  addedPlant={handleUnique}\r\n                  onSave={handleSave}\r\n                  onRemove={handleRemove}\r\n                  state={state}\r\n                />\r\n                <ReusableTable\r\n                  key={tableKey}\r\n                  data={tableData}\r\n                  columns={columns}\r\n                  meta={{ updateTableData }}\r\n                  widgetType=\"Plant_Assignment_Widget\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlantAssignment;\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../../index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n// import { io } from \"socket.io-client\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../../App.css\";\r\nimport \"../../styles/variables.css\";\r\nimport WidgetLifecycle from \"./WidgetLifecycle\";\r\nimport PlantAssignment from \"./plantAssignment\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <WidgetLifecycle />\r\n      <PlantAssignment />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\n// Function to inject the refresh listener script into the **parent window**\r\nfunction injectRefreshListener() {\r\n  // console.log(\"🌍 [index.js] Injecting refresh listener into parent window...\");\r\n\r\n  const scriptContent = `\r\n    function listenForRefreshClicks() {\r\n      // console.log(\"🌍 [Parent] Listening for manual refresh clicks...\");\r\n\r\n      document.body.addEventListener(\"click\", function (event) {\r\n        let refreshButton = event.target.closest(\"#refresh\"); // Check if refresh was clicked\r\n\r\n        if (refreshButton) {\r\n          // console.log(\"✅ [Parent] User clicked Refresh!\");\r\n          sessionStorage.setItem(\"userClickedRefresh\", \"true\"); // Store flag\r\n          // console.log(\"Stored Flag:\", sessionStorage.getItem(\"userClickedRefresh\"));\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    // ✅ Ensure event listener is added even if DOM is already loaded\r\n    if (document.readyState === \"loading\") {\r\n      document.addEventListener(\"DOMContentLoaded\", listenForRefreshClicks);\r\n    } else {\r\n      listenForRefreshClicks();\r\n    }\r\n  `;\r\n\r\n  // Inject script **into the parent window**\r\n  if (window.parent && window.parent.document) {\r\n    let injectedScript = window.parent.document.createElement(\"script\");\r\n    injectedScript.textContent = scriptContent;\r\n    window.parent.document.body.appendChild(injectedScript);\r\n    // console.log(\"✅ [index.js] Script successfully injected and executed in parent!\");\r\n  } else {\r\n    console.warn(\"⚠️ [index.js] Unable to inject script—parent window not accessible.\");\r\n  }\r\n}\r\n\r\n// ✅ Inject the script when the React app starts\r\ninjectRefreshListener();\r\n\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n"],"names":["usePlantDropableArea","showErrorToast","useToast","handlePlantAssignment","usePlantAssignment","isDropped","useSelector","state","droppedObject","loading","dispatch","useDispatch","fetchObjectDetails","useCallback","async","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","data","draggedObjectData","_dataItems$","_dataItems$2","console","log","setIsDroppedAction","objectId","objectType","MSG_FETCH_OBJECT_DETAILS_FAILED","error","setLoading","handleDrop","length","_dataItems$3","includes","MSG_INVALID_OBJECT_TYPE","setTimeout","warn","MSG_UNEXPECTED_ERROR","initializeDroppableArea","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","WidgetLifecycle","showSuccessToast","useState","useEffect","window","widget","trace","addEvent","_latestDraggedData$da","_latestDraggedData$da2","Error","stack","split","userClickedRefresh","sessionStorage","getItem","some","line","isAutoTriggeredRefresh","removeItem","latestDraggedData","store","getState","droppedObjectData","initialDraggedData","items","refreshWidgetData","MSG_REFRESH_ERROR","MSG_REFRESH_SUCCESS","_jsx","Loader","uniqueColumns","accessorKey","header","_ref","onAddPlant","addedPlant","onSave","onRemove","uniquedata","uniqueColumn","CAName","showWarningToast","AddedItem","setAddedItem","addedItemData","setAddedItemData","_jsxs","className","children","Popup","buttonText","columns","addedItem","newItems","map","title","Seq","Status","Change","MBom","onClick","handleSaveClick","MSG_SAVEPRODUCT_RELEASED_ERROR","MSG_SAVEPRODUCT_NOT_ALLOWED_ERROR","handleRemove","DragAndDropComponent","performSearch","useInterComSearch","_Fragment","Image","style","width","height","src","alt","SearchInput","onSearch","searchText","role","mode","default_with_precond","precond","show_precond","multiSel","idcard_activated","select_result_max_idcard","itemViewClickHandler","search_delegation","selectedObjects","id","PlantAssignment","tableKey","setTableKey","tableData","setTableData","assignedPlant","setAssignedPlant","uniqueData","setUniqueData","addedDataFromToolbar","setAddedDataFromToolbar","isTableLoading","setIsTableLoading","screenLoader","setScreenLoader","isCardDataAvailable","setIsCardDataAvailable","selectedTableRows","loadingParentDetails","proposedChanges","plantObjectData","allPlants","uniquePlant","uniquePlants","asignedPlant","initialAssignedPlants","productChildren","headers","updateTableData","updatedData","prevKey","type","dupInitialAssignedClasses","setDupInitialAssignedClasses","_droppedObjectData$in","_droppedObjectData$in2","updatedItems","classesToBeClassified","finalArray","updatedAssignedClasses","intclass","updatedClass","_objectSpread","forEach","tableItem","_allPlants$find","finalObj","plantName","Plant","replace","classid","find","classitem","MBOM","test","concat","MBOMName","MBOMValue","Type","push","initialClass","_allPlants$find2","classObject","rowstoDelete","_allPlants$find3","classItem","filter","result","saveData","Finalmessage","MSG_SAVE_SUCCESS","finalMessage","messageList","msg","trim","userSelect","cursor","position","paddingRight","handleCopy","textToCopy","join","navigator","clipboard","writeText","right","top","background","border","fontSize","color","FaRegCopy","size","index","formattedFinalMessage","autoClose","closeOnClick","finalobj","ErrorObj","Object","keys","response","errorObj","item","plant","processErrorObj","MSG_SAVE_FAILURE","newTableData","useMemo","MFGChange","MFGStatus","ChangeStatus","OracleTemplate","getTableData","uniqueTableData","getUniqueTableData","Title","owner","Owner","Description","imageURL","EIN","getCardData","cell","row","getValue","table","value","onChange","e","_table$options$meta","updatedValue","target","getRowModel","rows","r","original","options","meta","disabled","appearance","padding","textAlign","onMouseOver","onMouseOut","tableColumns","handleHomeClick","setIsDropped","parentDetails","versions","setPlantObjectData","CardWithDragAndDrop","PlantAssignmentToolbarNativeCta","prev","rest","_objectWithoutProperties","_excluded","updatedTableData","selectedRow","transformedData","selectedTitles","removedTitles","prevUniquePlants","alert","ReusableTable","widgetType","root","hasOnLoadRun","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","ToastContainer","start","parent","injectedScript","textContent","injectRefreshListener"],"sourceRoot":""}