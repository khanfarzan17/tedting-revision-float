{"version":3,"file":"static/js/387.8ebd66f7.chunk.js","mappings":"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","sources":["components/Popup/Popup.jsx","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/searchCAService.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/CADetailService.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/PlantAssignment/saveTableDataService.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  flexRender,\r\n} from \"@tanstack/react-table\";\r\nimport \"./Popup.css\";\r\nimport {\r\n  MSG_ADDPRODUCT_NOT_ALLOWED_ERROR,\r\n  MSG_ADDPRODUCT_RELEASED_ERROR,\r\n  MSG_EMPTYADD_ERROR,\r\n} from \"../../utils/toastMessages\";\r\nimport useToast from \"../../hooks/useToast\";\r\nconst Popup = ({ data, columns, buttonText, addedItem, CAName, state }) => {\r\n  const { showWarningToast } = useToast();\r\n  console.log(\"[Popup] Data Received: \", data);\r\n  const [uniqueTableData, setUniqueTableData] = useState(data);\r\n  const [show, setShow] = useState(false);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n\r\n  useEffect(() => {\r\n    setUniqueTableData(data);\r\n  }, [data]);\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleShow = () => {\r\n    if (CAName) {\r\n      setShow(true);\r\n    } else if (state === \"RELEASED\") {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign Modify change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_RELEASED_ERROR);\r\n    } else {\r\n      // alert(\r\n      //   \"Change Action is required to assign plants to Product, please assign change Action and try again\"\r\n      // );\r\n      showWarningToast(MSG_ADDPRODUCT_NOT_ALLOWED_ERROR);\r\n    }\r\n  };\r\n\r\n  const addPlant = () => {\r\n    // Some Logic\r\n    const selectedRows = table.getSelectedRowModel().rows;\r\n    const selectedItem = selectedRows.map(\r\n      (item) => item.original[\"Available Plant\"]\r\n    );\r\n    console.log(\"[selected Item]\", selectedItem);\r\n    // need to add a condition for the no of selected items\r\n    if (selectedItem.length === 0) {\r\n      // alert(\"Please select any of the Plant\");\r\n      showWarningToast(MSG_EMPTYADD_ERROR);\r\n    } else {\r\n      // console.log(\"dfhgfd\", selectedRows);\r\n      // const updatedTableData = uniqueTableData.filter(\r\n      //   (row) =>\r\n      //     !selectedRows.find(\r\n      //       (selectedRow) =>\r\n      //         selectedRow.original[\"Available Plant\"] === row[\"Available Plant\"]\r\n      //     )\r\n      // );\r\n      // console.log(updatedTableData);\r\n      // setUniqueTableData(updatedTableData);\r\n      // console.log(\"bjdbjd\", uniqueTableData);\r\n      setRowSelection({}); // Reset row selection after removal\r\n      addedItem(selectedItem);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  // Enhance columns with selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"select\",\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"form-check-input\"\r\n          checked={row.getIsSelected()}\r\n          onChange={row.getToggleSelectedHandler()}\r\n        />\r\n      ),\r\n    };\r\n\r\n    return [selectionColumn, ...columns];\r\n  }, [columns]);\r\n\r\n  const table = useReactTable({\r\n    data: uniqueTableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn btn-outline-primary btn-lg m-2\"\r\n        onClick={handleShow}\r\n      >\r\n        {buttonText}\r\n      </button>\r\n\r\n      {show && (\r\n        <>\r\n          <div className=\"modal d-block\" tabIndex=\"-1\">\r\n            <div\r\n              className=\"modal-dialog modal-dialog-centered\"\r\n              style={{ maxWidth: \"500px\" }}\r\n            >\r\n              <div className=\"modal-content  container\">\r\n                <div className=\"modal-header\">\r\n                  <h5 className=\"me-5 popup-title\">{columns[0].header}</h5>\r\n\r\n                  <div>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-primary me-3\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: true },\r\n                        })\r\n                      }\r\n                    >\r\n                      Select All\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-secondary\"\r\n                      onClick={() =>\r\n                        table.getToggleAllRowsSelectedHandler()({\r\n                          target: { checked: false },\r\n                        })\r\n                      }\r\n                    >\r\n                      Deselect All\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"modal-body p-0\">\r\n                  {table.getRowModel().rows.length > 0 ? (\r\n                    <div\r\n                      className=\"overflow-auto\"\r\n                      style={{ maxHeight: \"60vh\" }}\r\n                    >\r\n                      {table.getRowModel().rows.map((row) => (\r\n                        <div\r\n                          key={row.id}\r\n                          className=\"p-3 border-bottom d-flex align-items-center\"\r\n                          style={{\r\n                            backgroundColor: row.getIsSelected()\r\n                              ? \"#d5e8f2\"\r\n                              : \"inherit\",\r\n                          }}\r\n                        >\r\n                          <div className=\"me-3\">\r\n                            {flexRender(\r\n                              row.getVisibleCells()[0].column.columnDef.cell,\r\n                              row.getVisibleCells()[0].getContext()\r\n                            )}\r\n                          </div>\r\n                          <div>{row.original[columns[0].accessorKey]}</div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted p-3\">No data available</p>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className=\"modal-footer d-flex justify-content-end\"\r\n                  style={{ backgroundColor: \"#f1f1f1\" }}\r\n                >\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary me-2\"\r\n                    onClick={handleClose}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    onClick={addPlant}\r\n                    type=\"button\"\r\n                    className=\"btn btn-primary\"\r\n                  >\r\n                    Add\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-backdrop fade show\"></div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/sharing/getSharing\";\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const SearchCA = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n\r\n  try {\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/search?$searchStr=name:${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const caID = searchResponse.changeAction[0]?.identifier;\r\n\r\n    console.log(\"Response From 1st Call\", caID);\r\n\r\n    if (caID) {\r\n      // 2nd API call to fetch Change Action details\r\n      const CAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${caID}?$fields=proposedChanges,flowDown`;\r\n      const CAresponse = await fetchData(CAUrl);\r\n\r\n      console.log(\"Response From 2nd Call\", CAresponse);\r\n\r\n      if (CAresponse) {\r\n        // Use for...of for async handling in loop\r\n        for (const item of CAresponse.isFlowDownOf || []) {\r\n          if (item.type === \"Change Action\") {\r\n            const parentCAUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${item.identifier}?$fields=proposedChanges,flowDown`;\r\n\r\n            try {\r\n              // 3rd API call to fetch Parent Change Action details\r\n              const parentCAResponse = await fetchData(parentCAUrl);\r\n\r\n              console.log(\"Response From 3rd Call\", parentCAResponse);\r\n\r\n              if (parentCAResponse) {\r\n                CADetails.CAAtt.push({\r\n                  CATitle: parentCAResponse.title,\r\n                  CAState: parentCAResponse.state,\r\n                });\r\n              }\r\n            } catch (error) {\r\n              console.error(\"Error fetching parent CA data:\", error);\r\n            }\r\n          }\r\n        }\r\n\r\n        CADetails[\"MCOState\"] = CAresponse.state;\r\n        CADetails[\"MCOTitle\"] = CAresponse.title;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\nimport {\r\n  setCAName,\r\n  setHeaders,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // HERE IS THE iSSUE THAT THIS FUNCTION IS ALWAYS CALLED .\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  // const securityContext1 = initWidget.getValue(\"Credentials\");\r\n  // console.log(\"Srcurity Context in usePlantAssignment:\", securityContext1);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true));\r\n      const headers = await fetchCsrfToken();\r\n      // Step 1: Call Initial Service\r\n      if (headers) {\r\n        console.log(\"[UsePlantAssignment] Headers are\", headers);\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 3: Pass Combined Data to Additional Service\r\n        if (allCollabSpaces) {\r\n          const allPlants = await getAllPlants(\r\n            allCollabSpaces,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment] All Plants are:\", allPlants);\r\n\r\n          if (allPlants) {\r\n            const plants = await fetchAssignedPlants(\r\n              allPlants,\r\n              headers,\r\n              objectId\r\n            );\r\n\r\n            console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n            // to dispatch the plants\r\n            if (plants.success) {\r\n              dispatch(setPlantObjectData(plants.data.plantData));\r\n              dispatch(setHeaders(headers));\r\n            } else {\r\n              console.error(\"Failed to fetch plant data\");\r\n            }\r\n          } else {\r\n            console.warn(\"[Use All Plants] There are no Plants\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use All Plants] There are no CollabSpace\");\r\n        }\r\n\r\n        // Step 4: Call Remaining Independent Services\r\n        let getProductChildren = {};\r\n        console.log(\"Type Before:\", type);\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = {\r\n            success: true,\r\n            data: [],\r\n          };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          ); // type we need here\r\n        }\r\n        console.log(\"Type After:\", type);\r\n        console.log(\"[Use All Plants] Product Childrens\", getProductChildren);\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use All Plants] Get CA Details\", getCaDetails);\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n        }\r\n\r\n        // Step 5: Dispatch Results to Redux\r\n\r\n        // hERE WE CAN ADD TOAST\r\n        console.log(\"[Plant Assignment] All Services Executed Successfully\");\r\n\r\n        return;\r\n      } else {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      dispatch(setParentDetailsLoading(false));\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // End loading at the top level\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return SearchCA(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  let urlObjWAF =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/\";\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  const URLCADetails =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/setPreferences\";\r\n\r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/enorelnav/v2/navigate/getEcosystem\";\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n\r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n\r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n\r\n            if (status !== \"Complete\") {\r\n              let url3 = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n\r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n\r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n\r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n\r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n\r\n    throw error;\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","import axios from \"axios\";\r\nimport { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const saveData = async (\r\n  updatedItems,\r\n  classesToBeClassified,\r\n  initialAssignedClasses,\r\n  headers,\r\n  productId,\r\n  AllClasses,\r\n  productChilds,\r\n  type,\r\n  rowstoDelete,\r\n  finalArray,\r\n  proposedChanges\r\n) => {\r\n  try {\r\n    console.log(\"[Save Data] Starting data saving process...\");\r\n    console.log(\"Type in Save Table Data:\", type);\r\n    console.log(\"Final aRRAY IS inside Save:\", finalArray);\r\n    console.log(\"Proposed Changes in Save\", proposedChanges);\r\n    const classifiedClasses = [...classesToBeClassified];\r\n    const WAFData = await loadWAFData();\r\n    const fetchOOTBData = async (url, body, method) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(body),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Response received:\", response);\r\n            resolve(response);\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error);\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const fetchData = async (\r\n      url,\r\n      body = null,\r\n      method = \"GET\"\r\n      // headers = {}\r\n    ) => {\r\n      console.log(\"Fetching URL:\", url);\r\n      console.log(\"Method is:\");\r\n      console.log(\"Request Body:\", JSON.stringify(body, null, 2));\r\n\r\n      try {\r\n        const response = await axios({\r\n          url,\r\n          method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: body, // Include body only if provided\r\n        });\r\n\r\n        console.log(\"Response received:\", response.data);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(\"Request failed:\", error);\r\n        throw error; // Propagate the error to the caller\r\n      }\r\n    };\r\n\r\n    // released childs but not present in CA Proposed Changes\r\n    let NotPropagableChilds = productChilds.filter((prodChild) => {\r\n      if (prodChild.state.toLowerCase() === \"released\") {\r\n        const change = proposedChanges.find(\r\n          (change) =>\r\n            change.identifier === prodChild.id &&\r\n            change.action.toLowerCase() === \"modify\"\r\n        );\r\n        return !change;\r\n      }\r\n      return false;\r\n    });\r\n    console.log(\"NotPropagableChilds ARE :\", NotPropagableChilds);\r\n\r\n    let ErrorObj = [];\r\n    finalArray.forEach((classItem) => {\r\n      //if (classItem.Type === \"New\" || classItem.Type === \"Update\" ) {\r\n      if (classItem.MBOMValue) {\r\n        let prodchilds = [];\r\n        NotPropagableChilds.forEach((notPropagableChild) => {\r\n          if (!notPropagableChild.classes.includes(classItem.id)) {\r\n            prodchilds.push({\r\n              childId: notPropagableChild.id,\r\n              childName: notPropagableChild.name,\r\n            });\r\n          }\r\n        });\r\n        if (prodchilds.length > 0) {\r\n          ErrorObj.push({\r\n            id: classItem.id,\r\n            title: classItem.title,\r\n            childs: prodchilds,\r\n            type: classItem.Type,\r\n          });\r\n        }\r\n      }\r\n    });\r\n    let Finalmessage = \"\";\r\n    console.log(\"ErrorObj IS\", ErrorObj);\r\n    ErrorObj.forEach((item) => {\r\n      let message = \"\";\r\n\r\n      // Check if item.childs is an array and contains valid objects with titles\r\n      if (\r\n        Array.isArray(item.childs) &&\r\n        item.childs.every((child) => child.childName)\r\n      ) {\r\n        const childTitles = item.childs\r\n          .map((child) => child.childName)\r\n          .join(\", \");\r\n        console.log(\"Chilld Titles are\", childTitles);\r\n        if (item.type.toLowerCase() !== \"new\") {\r\n          message = `${item.title} MBOM can't be Make due to unclassified child items: ${childTitles}`;\r\n        } else {\r\n          message = `Unable to classify product ${item.title} due to unclassified child items: ${childTitles}`;\r\n        }\r\n        console.log(\"Message is:\", message);\r\n      } else {\r\n        // Handle case where childs is invalid or missing titles\r\n        message = `Invalid child data for ${item.title}.`;\r\n      }\r\n\r\n      //  item.message = message;\r\n      Finalmessage += `${message}\\n`; // Using '\\n' to separate each message with a new line\r\n    });\r\n    console.log(ErrorObj);\r\n    console.log(\"Concatenated Messages:\\n\", Finalmessage);\r\n\r\n    let newClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.Type.toLowerCase() === \"new\" &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n    console.log(\"New Classes are:\", newClasses);\r\n    let updateBody = {};\r\n    finalArray.forEach((classItem) => {\r\n      const isIdNotInErrorObj = !ErrorObj.some(\r\n        (errorItem) => errorItem.id === classItem.id\r\n      );\r\n      if (\r\n        isIdNotInErrorObj &&\r\n        (classItem.Type.toLowerCase() === \"update\" ||\r\n          (classItem.Type.toLowerCase() === \"new\" && classItem.MBOMValue))\r\n      ) {\r\n        updateBody[classItem.MBOMName] = classItem.MBOMValue;\r\n      }\r\n    });\r\n    console.log(\"Update body is:\", updateBody);\r\n\r\n    let propagateClasses = finalArray\r\n      .filter(\r\n        (classItem) =>\r\n          classItem.MBOMValue &&\r\n          !ErrorObj.some((errorItem) => errorItem.id === classItem.id)\r\n      )\r\n      .map((classItem) => classItem.id);\r\n\r\n    console.log(\"Propogateable classes are\", propagateClasses);\r\n\r\n    if (newClasses.length > 0) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: newClasses,\r\n        mode: \"classifyParent\",\r\n      };\r\n      const classifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"classifyResponse:\", JSON.stringify(classifyResponse));\r\n    }\r\n\r\n    if (Object.keys(updateBody).length > 0) {\r\n      const nextApiUrl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${productId}`;\r\n      const response = await fetchOOTBData(nextApiUrl, \"\", \"GET\");\r\n      console.log(\"CStamp Response:\", response);\r\n      let cestamp = response.member[0]?.cestamp || \"\";\r\n      updateBody[\"cestamp\"] = cestamp;\r\n\r\n      const patchUrl = `https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/updateClassificationAttribute?id=${productId}`;\r\n      await fetchData(patchUrl, updateBody, \"PATCH\");\r\n      console.log(\"Updated database successfully.\");\r\n    }\r\n\r\n    if (\r\n      propagateClasses.length > 0 &&\r\n      productChilds.length > 0 &&\r\n      type === \"VPMReference\"\r\n    ) {\r\n      let classifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/classifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: propagateClasses,\r\n        childs: productChilds,\r\n        mode: \"classifychilds\",\r\n      };\r\n      const childclassifyResponse = await fetchData(\r\n        classifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\r\n        \"child classifyResponse:\",\r\n        JSON.stringify(childclassifyResponse)\r\n      );\r\n    }\r\n    if (rowstoDelete.length > 0) {\r\n      let declassifyUrl =\r\n        \"https://emr-product-datahub-server-sap-stage.azurewebsites.net/plantAssignment/declassifyProductToClass\";\r\n\r\n      let classifybody = {\r\n        id: productId,\r\n        type: type,\r\n        classes: rowstoDelete,\r\n      };\r\n      const declassifyResponse = await fetchData(\r\n        declassifyUrl,\r\n        classifybody,\r\n        \"POST\"\r\n      );\r\n      console.log(\"declassifyResponse:\", JSON.stringify(declassifyResponse));\r\n    }\r\n\r\n    console.log(\"All classification API calls completed successfully.\");\r\n\r\n    return {\r\n      success: true,\r\n      message: \"Data saved successfully\",\r\n      ErrorObj: ErrorObj,\r\n      Finalmessage: Finalmessage,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error occurred:\", error);\r\n    return { success: false, message: \"Failed to save data\", error };\r\n  }\r\n};\r\n"],"names":["_ref","data","columns","buttonText","addedItem","CAName","state","showWarningToast","useToast","console","log","uniqueTableData","setUniqueTableData","useState","show","setShow","rowSelection","setRowSelection","useEffect","handleClose","enhancedColumns","useMemo","id","cell","_ref2","row","_jsx","type","className","checked","getIsSelected","onChange","getToggleSelectedHandler","table","useReactTable","enableRowSelection","onRowSelectionChange","getCoreRowModel","_jsxs","_Fragment","children","onClick","handleShow","MSG_ADDPRODUCT_RELEASED_ERROR","MSG_ADDPRODUCT_NOT_ALLOWED_ERROR","tabIndex","style","maxWidth","header","getToggleAllRowsSelectedHandler","target","getRowModel","rows","length","maxHeight","map","backgroundColor","flexRender","getVisibleCells","column","columnDef","getContext","original","accessorKey","addPlant","selectedItem","getSelectedRowModel","item","MSG_EMPTYADD_ERROR","SearchCA","async","flowDownCA","headers","CADetails","CAAtt","_searchResponse$chang","WAFData","loadWAFData","fetchData","Promise","resolve","reject","authenticatedRequest","url","method","onComplete","response","onFailure","error","urlObjWAF","concat","caID","changeAction","identifier","CAUrl","CAresponse","isFlowDownOf","parentCAUrl","parentCAResponse","push","CATitle","title","CAState","usePlantAssignment","showErrorToast","dispatch","useDispatch","email","window","widget","getValue","handlePlantAssignment","collabSpace","objectId","setParentDetailsLoading","fetchCsrfToken","userGroupCollab","_objectSpread","JSON","stringify","objectID","userGroup","userGroupBody","groups","results","forEach","result","sharings","userGroups","group","access","uri","userGroupID","replace","grpUrl","grpresponse","filter","members","includes","getUserGroupCollab","allCollabSpaces","allPlants","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","member","find","libraryDataURL","classResponse","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","some","userClass","all","getAllPlants","plants","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","obj","promiseArray","Attributes","eachAttribute","name","value","then","flowDownCADetails","MCOTitle","MCOState","CA","slice","trim","allClass","assigned","success","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","warn","getProductChildren","body","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","child","toLowerCase","classesurl","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","widgetId","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","bd","responseMode","ids","status","response2","objectsByPatterns","caproposedwhere_from","itm","url3","response3","Array","isArray","proposedChanges","proposedChange","where","action","whats","what","fetchCADetails","setCAName","setProposedChanges","MSG_FETCH_CSRF_HEADERS_FAILED","securityContext1","csrfURL","process","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","saveData","updatedItems","classesToBeClassified","productId","AllClasses","productChilds","rowstoDelete","finalArray","fetchOOTBData","arguments","undefined","axios","NotPropagableChilds","prodChild","change","ErrorObj","MBOMValue","prodchilds","notPropagableChild","childId","childName","Type","Finalmessage","message","every","childTitles","join","newClasses","errorItem","updateBody","MBOMName","propagateClasses","classifyUrl","classifybody","mode","classifyResponse","Object","keys","_response$member$","nextApiUrl","cestamp","patchUrl","childclassifyResponse","declassifyUrl","declassifyResponse"],"sourceRoot":""}