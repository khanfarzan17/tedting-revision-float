{"version":3,"file":"static/js/766.7af86099.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","components/Pagination/Pagination.jsx","components/Modals/SuccessModal.jsx","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled\r\n            ? \"Please select an operation first to Enable File uploading \"\r\n            : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n      \r\n\r\n      if (headerMismatch) {\r\n        console.error(\" Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map((title) =>\r\n        title.toLowerCase()\r\n      );\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Special case for Physical Product Structure: Find Number and Quantity not mandatory for level 0 rows\r\n            if (\r\n              matchedOperation === \"Physical Product Structure\" &&\r\n              (field === \"Find Number\" || field === \"Quantity\") &&\r\n              row[\"Level\"] !== undefined &&\r\n              (row[\"Level\"] === 0 || row[\"Level\"] === \"0\")\r\n            ) {\r\n              // Skip validation for these fields on level 0 rows\r\n              return;\r\n            }\r\n\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined ||\r\n              row[field] === null ||\r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace =\r\n              row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (\r\n              !userCollabSpace ||\r\n              !lowerCaseCollabSpaceTitles.includes(userCollabSpace)\r\n            ) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n          // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n          if (matchedOperation === \"Physical Product Structure\") {\r\n            columnName = \"Quantity\";\r\n            const quantityValue = row[columnName]?.toString().trim();\r\n            if (quantityValue) {\r\n              const numQuantity = Number(quantityValue);\r\n              if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                validationErrors.push(\r\n                  `Row ${\r\n                    globalRowIndex + 2\r\n                  }: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                );\r\n                console.log(\r\n                  \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                  quantityValue\r\n                );\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\" Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  onChange,\r\n  size,\r\n  className,\r\n  disabled,\r\n  options,\r\n}) => {\r\n  const defaultLabel = options?.defaultLabel || \"Please select\";\r\n  const list = options?.list || [];\r\n\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n  // Check if we have grouped options (array of objects with label and options properties)\r\n  const hasGroupedOptions =\r\n    Array.isArray(list) &&\r\n    list.length > 0 &&\r\n    list[0] &&\r\n    \"label\" in list[0] &&\r\n    \"options\" in list[0];\r\n\r\n  // console.log(\"CustomSelect received options:\", {\r\n  //   list,\r\n  //   hasGroupedOptions,\r\n  //   selectedValue,\r\n  // });\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{defaultLabel}</option> {/* Default option */}\r\n      {hasGroupedOptions\r\n        ? // Render grouped options with optgroup\r\n          list.map((group, groupIndex) => (\r\n            <optgroup key={`group-${groupIndex}`} label={group.label}>\r\n              {Array.isArray(group.options) &&\r\n                group.options.map((item, optionIndex) => (\r\n                  <option\r\n                    key={`option-${groupIndex}-${optionIndex}`}\r\n                    value={item.value}\r\n                  >\r\n                    {item.label}\r\n                  </option>\r\n                ))}\r\n            </optgroup>\r\n          ))\r\n        : // Render flat list of options\r\n          list.map((item, idx) => (\r\n            <option key={`option-${idx}`} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport CustomButton from \"../Button/Button\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const handleExportErrors = () => {\r\n    // Transform processedErrors into a format suitable for Excel\r\n    const exportData = processedErrors.map((error) => ({\r\n      \"Row Number\": error.rowNumber,\r\n      \"Column Names\": error.columns.join(\", \"),\r\n      \"Error Description\": error.errors.join(\"; \"),\r\n    }));\r\n\r\n    // Call the handleExportExcel function with the transformed data\r\n    handleExportExcel(exportData, \"validation-errors.xlsx\");\r\n  };\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <div className=\"error-header-container\">\r\n        <div></div>\r\n        <CustomButton\r\n          variant=\"success\"\r\n          onClick={handleExportErrors}\r\n          className=\"mb-3\"\r\n          text=\"Export to Excel\"\r\n          size=\"lg\"\r\n        />\r\n      </div>\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport \"./ConfirmationModal.css\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirm Submission\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Submit\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"confirmation-modal-content\">\r\n        <h4 className=\"confirmation-title\">\r\n          Are you sure you want to submit? This action cannot be undone.\r\n        </h4>\r\n\r\n        <ReusableAlert\r\n          variant=\"info\"\r\n          className=\"mb-3\"\r\n          message={\r\n            <span className=\"info-message-container\">\r\n              <span className=\"info-icon\">i</span>\r\n\r\n              <span className=\"info-text\">\r\n                Once submitted, your data will be processed by the system. You\r\n                will receive a confirmation once its complete. Large uploads may\r\n                take a few minutes.\r\n              </span>\r\n            </span>\r\n          }\r\n        />\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n          // console.log(`Filtered options for column ${header}`, filteredOptions);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || \"--\"}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    // console.log(\r\n    //   `Checking if header '${header}' matches any NLS value:`,\r\n    //   hasMatch\r\n    // );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    // console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    // Check if current header has a matching NLS value or is mandatory\r\n    const currentHeaderHasNLS = hasMatchingNLS(currentColumnHeader);\r\n    const isCurrentHeaderMandatory =\r\n      mandatoryAttributes.includes(currentColumnHeader);\r\n    const shouldExcludeOwnLabel =\r\n      currentHeaderHasNLS || isCurrentHeaderMandatory;\r\n\r\n    // For debugging\r\n    // console.log(\r\n    //   `Column '${currentColumnHeader}': has NLS match=${currentHeaderHasNLS}, is mandatory=${isCurrentHeaderMandatory}, should exclude own label=${shouldExcludeOwnLabel}`\r\n    // );\r\n\r\n    // Get currently selected values to filter them out (from other columns)\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          // Basic filters first\r\n          const isEBOMAttribute = attr.group === \"EBOM Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return isEBOMAttribute && !isAlreadySelected && !shouldExclude;\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group with the same filtering logic\r\n      const partAttributes = dropdownOptions\r\n        .filter((attr) => {\r\n          const isNotEBOMAttribute = attr.group !== \"EBOM Attributes\";\r\n          const isNotSystemAttribute = attr.group !== \"System Attributes\";\r\n          const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n          // Check if this attribute matches ANY NLS value - same as non-operation 2 logic\r\n          const matchesAnyNLS = allNLSValues.some(\r\n            (nls) =>\r\n              nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n          );\r\n\r\n          // Check if this attribute is in the mandatory list\r\n          const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n          // Only exclude if it matches an NLS value AND is mandatory\r\n          const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n          // For debugging\r\n          if (shouldExclude) {\r\n            // console.log(\r\n            //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n            // );\r\n          }\r\n\r\n          return (\r\n            isNotEBOMAttribute &&\r\n            isNotSystemAttribute &&\r\n            !isAlreadySelected &&\r\n            !shouldExclude\r\n          );\r\n        })\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For operation 4, return only the 4 specific BOS Attributes\r\n    if (operationChoice === \"4\") {\r\n      // List of only the 4 attributes we want to show\r\n      const allowedBosAttributes = [\r\n        \"Print On Purchase Order Required\",\r\n        \"Print On Work Order Required\",\r\n        \"Work Order Document Required\",\r\n        \"Print On report Order Required\",\r\n      ];\r\n\r\n      // Return a flat array of only the 4 specific BOS Attributes\r\n      return dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group === \"BOS Attributes\" &&\r\n            allowedBosAttributes.includes(attr.uiLabel) &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n    }\r\n\r\n    // For other operations, return flat list with the same filtering logic\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => {\r\n        const isAlreadySelected = selectedValues.includes(attr.uiLabel);\r\n\r\n        // Check if this attribute matches ANY NLS value\r\n        const matchesAnyNLS = allNLSValues.some(\r\n          (nls) =>\r\n            nls.toLowerCase().trim() === attr.uiLabel.toLowerCase().trim()\r\n        );\r\n\r\n        // Check if this attribute is in the mandatory list\r\n        const isMandatory = mandatoryAttributes.includes(attr.uiLabel);\r\n\r\n        // Only exclude if it matches an NLS value AND is mandatory\r\n        const shouldExclude = matchesAnyNLS && isMandatory;\r\n\r\n        // For debugging\r\n        if (shouldExclude) {\r\n          // console.log(\r\n          //   `Excluding from dropdown: ${attr.uiLabel} (NLS match: ${matchesAnyNLS}, mandatory: ${isMandatory})`\r\n          // );\r\n        }\r\n\r\n        // Return true to keep items that are either NOT already selected OR don't meet exclusion criteria\r\n        return !isAlreadySelected && !shouldExclude;\r\n      })\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    // console.log(\r\n    //   \"Final filteredOptions for column:\",\r\n    //   currentColumnHeader,\r\n    //   filteredOptions\r\n    // );\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      // Special handling for operation 2 - disable system attributes even if not mandatory\r\n      let shouldBeDisabled = hasNLS && isMandatory;\r\n\r\n      if (operationChoice === \"2\" && hasNLS) {\r\n        // Check if this is a system attribute for operation 2\r\n        const isSystemAttribute = [\r\n          \"Description\",\r\n          \"EIN Number\",\r\n          \"Type\",\r\n          \"Title\",\r\n          \"Collaborative Space\",\r\n          \"Physical Product/Raw Material\",\r\n        ].some(\r\n          (attr) => header.toLowerCase().trim() === attr.toLowerCase().trim()\r\n        );\r\n\r\n        // For operation 2, disable if it's a system attribute regardless of mandatory status\r\n        if (isSystemAttribute) {\r\n          shouldBeDisabled = true;\r\n          // console.log(\r\n          //   `Operation 2: Disabling system attribute '${header}' regardless of mandatory status`\r\n          // );\r\n        }\r\n      }\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: shouldBeDisabled,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(\r\n    initialOperationChoice\r\n  );\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Physical Product/Raw Material\",\r\n          nls: \"Physical Product/Raw Material\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const controlCenterAttributes = [\r\n        {\r\n          name: \"EMR_hasMBOM\", // Change from backendName to name\r\n          nls: \"Has MBOM\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n        {\r\n          name: \"EMR_Phase\", // Change from backendName to name\r\n          nls: \"Phase\",\r\n          groupNLS: \"Object Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"name\",\r\n            nls: \"Reference Designator\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"quantity\",\r\n            nls: \"Quantity\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"PartType\",\r\n            nls: \"PartType\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      // Define BOS attributes for Physical Product-Document operation (operation 4)\r\n      let bosAttributes = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosAttributes = [\r\n          {\r\n            name: \"Print On Purchase Order Required\",\r\n            nls: \"Print On Purchase Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On Work Order Required\",\r\n            nls: \"Print On Work Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Work Order Document Required\",\r\n            nls: \"Work Order Document Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Print On report Order Required\",\r\n            nls: \"Print On report Order Required\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Part Type\",\r\n            nls: \"Part Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n\r\n          {\r\n            name: \"Part Revision\",\r\n            nls: \"Part Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Type\",\r\n            nls: \"Document Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Name\",\r\n            nls: \"Document Name\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Document Revision\",\r\n            nls: \"Document Revision\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n          {\r\n            name: \"Relationship Type\",\r\n            nls: \"Relationship Type\",\r\n            group: \"BOS Attributes\",\r\n            groupNLS: \"BOS Attributes\",\r\n          },\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (\r\n        effectiveOperation === \"2\" &&\r\n        !attributeGroups.includes(\"EBOM Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Add BOS Attributes group for operation 4\r\n      if (\r\n        effectiveOperation === \"4\" &&\r\n        !attributeGroups.includes(\"BOS Attributes\")\r\n      ) {\r\n        attributeGroups.push(\"BOS Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n      // / Get NLS values from BOS attributes when operation is 4\r\n      let bosNlsValues = [];\r\n      if (effectiveOperation === \"4\") {\r\n        bosNlsValues = bosAttributes.map((item) => item.nls);\r\n        console.log(\"BOS NLS Values:\", bosNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [\r\n        ...new Set([\r\n          ...apiNlsValues,\r\n          ...systemNlsValues,\r\n          ...ebomNlsValues,\r\n          ...bosNlsValues,\r\n        ]),\r\n      ];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes,...controlCenterAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\r\n          \"Added EBOM attributes to merged attributes for operation 2\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n      if (effectiveOperation === \"4\") {\r\n        mergeAttributes = [...mergeAttributes, ...bosAttributes];\r\n        console.log(\r\n          \"Added BOS attributes to merged attributes for operation 4\",\r\n          mergeAttributes\r\n        );\r\n      }\r\n\r\n      console.log(\"Final merged attributes including Control Center:\", mergeAttributes);\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find(\r\n            (attr) =>\r\n              attr.groupNLS === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\"\r\n          )\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        // console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        // console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React from \"react\";\r\nimport \"./Pagination.css\";\r\n\r\nconst Pagination = ({\r\n  currentPage,\r\n  totalItems,\r\n  itemsPerPage,\r\n  onPageChange,\r\n}) => {\r\n  const totalPages = Math.ceil(totalItems / itemsPerPage);\r\n\r\n  if (totalPages <= 1) return null;\r\n\r\n  const start = (currentPage - 1) * itemsPerPage + 1;\r\n  const end = Math.min(currentPage * itemsPerPage, totalItems);\r\n\r\n  return (\r\n    <div className=\"pagination-footer\">\r\n      <div className=\"pagination-info\">\r\n        Showing {start}–{end} of {totalItems}\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <button\r\n          disabled={currentPage === 1}\r\n          onClick={() => onPageChange(currentPage - 1)}\r\n        >\r\n          Prev\r\n        </button>\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i}\r\n            className={currentPage === i + 1 ? \"active\" : \"\"}\r\n            onClick={() => onPageChange(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n        <button\r\n          disabled={currentPage === totalPages}\r\n          onClick={() => onPageChange(currentPage + 1)}\r\n        >\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport CustomModal from \"../Modal/customModal\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"react-virtualized/styles.css\";\r\nimport \"./SuccessModal.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport Pagination from \"../Pagination/Pagination\";\r\nimport { ResizableBox } from \"react-resizable\";\r\nimport \"react-resizable/css/styles.css\";\r\n\r\nconst SuccessModal = ({\r\n  show = false,\r\n  onHide = () => {},\r\n  responseData = [],\r\n}) => {\r\n  const itemsPerPage = 15;\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [columnWidths, setColumnWidths] = useState({});\r\n\r\n  // Memoized CellMeasurer cache\r\n  const cache = useMemo(() => {\r\n    return new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    });\r\n  }, []);\r\n\r\n  // Dynamically generate columns based on the response data\r\n  const columns = useMemo(() => {\r\n    if (!responseData || responseData.length === 0) return [];\r\n\r\n    // Collect all unique keys from ALL items in the response data\r\n    const allKeys = new Set();\r\n    responseData.forEach((item) => {\r\n      Object.keys(item).forEach((key) => allKeys.add(key));\r\n    });\r\n\r\n    // Helper function to format header text\r\n\r\n    const formatHeaderText = (key) => {\r\n      // Replace underscores and hyphens with spaces\r\n      const spacedText = key.replace(/[_-]/g, \" \");\r\n\r\n      // Convert to title case (capitalize first letter of each word)\r\n      return spacedText\r\n        .split(\" \")\r\n        .map((word) =>\r\n          word === word.toUpperCase()\r\n            ? word // preserve acronyms like EIN, ID\r\n            : word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()\r\n        )\r\n        .join(\" \");\r\n    };\r\n\r\n    // Convert keys to column definitions\r\n    return Array.from(allKeys).map((key) => {\r\n      // Set appropriate widths based on column type\r\n      let width = columnWidths[key] || 120;\r\n      // if (\r\n      //   key.toLowerCase().includes(\"message\") ||\r\n      //   key.toLowerCase().includes(\"description\")\r\n      // ) {\r\n      //   width = columnWidths[key] || 40;\r\n      // } else if (key.toLowerCase().includes(\"status\")) {\r\n      //   width = columnWidths[key] || 15;\r\n      // } else if (key.toLowerCase().includes(\"revision\")) {\r\n      //   width = columnWidths[key] || 10;\r\n      // } else if (\r\n      //   key.toLowerCase().includes(\"ein\") ||\r\n      //   key.toLowerCase().includes(\"number\")\r\n      // ) {\r\n      //   width = columnWidths[key] || 25;\r\n      // }\r\n\r\n      return {\r\n        key: key,\r\n        header: formatHeaderText(key), // Use the formatted header text\r\n        width: width,\r\n        tooltip: formatHeaderText(key), // Update tooltip too\r\n      };\r\n    });\r\n  }, [responseData, columnWidths]);\r\n\r\n  const handleResize = (key, newWidth) => {\r\n    setColumnWidths((prev) => ({ ...prev, [key]: newWidth }));\r\n  };\r\n\r\n  // Paginate response data\r\n  const paginatedData = useMemo(() => {\r\n    const start = (currentPage - 1) * itemsPerPage;\r\n    return responseData.slice(start, start + itemsPerPage);\r\n  }, [currentPage, responseData]);\r\n\r\n  const handleExport = () => {\r\n    handleExportExcel(responseData, \"upload-results.xlsx\");\r\n  };\r\n\r\n  console.log(\"SuccessModal received response data:\", responseData);\r\n  console.log(\"Generated columns:\", columns);\r\n\r\n  useEffect(() => {\r\n    cache.clearAll();\r\n  }, [paginatedData, cache]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  // Safe getter function to handle case sensitivity and missing properties\r\n  const getItemValue = (item, key) => {\r\n    if (!item || typeof item !== \"object\") return \"-\";\r\n\r\n    // Direct match\r\n    if (item[key] !== undefined) return item[key];\r\n\r\n    // Case-insensitive match\r\n    const lowerKey = key.toLowerCase();\r\n    for (const k of Object.keys(item)) {\r\n      if (k.toLowerCase() === lowerKey) {\r\n        return item[k];\r\n      }\r\n    }\r\n\r\n    return \"-\";\r\n  };\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const item = paginatedData[index];\r\n    if (!item) return null;\r\n\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"virtualized-row\">\r\n          {columns.map((column, colIndex) => {\r\n            const value = getItemValue(item, column.key);\r\n\r\n            // Special handling for status field\r\n            if (column.key.toLowerCase().includes(\"status\")) {\r\n              const statusValue = String(value).toLowerCase();\r\n              const statusClass = statusValue.includes(\"success\")\r\n                ? \"success\"\r\n                : statusValue.includes(\"fail\") || statusValue.includes(\"error\")\r\n                ? \"failed\"\r\n                : \"\";\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`virtualized-cell status-cell ${statusClass}`}\r\n                  style={{ width: column.width }}\r\n                  title={String(value)}\r\n                >\r\n                  {value}\r\n                </div>\r\n              );\r\n            }\r\n\r\n            // Default handling for other fields\r\n            return (\r\n              <div\r\n                key={colIndex}\r\n                className=\"virtualized-cell\"\r\n                style={{ width: column.width }}\r\n                title={String(value)}\r\n              >\r\n                {String(value)}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Upload Results\"\r\n      size=\"lg\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"success-modal-content\">\r\n        <div className=\"top-bar\">\r\n          <div></div>\r\n          <CustomButton\r\n            variant=\"success\"\r\n            size=\"lg\"\r\n            onClick={handleExport}\r\n            className=\"m-2 border-bottom-10px\"\r\n            text=\"Export to Excel \"\r\n          />\r\n        </div>\r\n\r\n        <ReusableAlert\r\n          variant=\"success\"\r\n          message={\r\n            <p className=\"success-message-text\">\r\n              ✅ <strong>Success:</strong> {responseData.length} item\r\n              {responseData.length > 1 ? \"s\" : \"\"} processed.\r\n            </p>\r\n          }\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        {columns.length > 0 ? (\r\n          <>\r\n            <div className=\"virtualized-table-container\">\r\n              <div className=\"virtualized-header\" style={{ display: \"flex\" }}>\r\n                {columns.map((column, idx) => (\r\n                  <ResizableBox\r\n                    key={column.key}\r\n                    width={column.width}\r\n                    height={30}\r\n                    axis=\"x\"\r\n                    resizeHandles={[\"e\"]}\r\n                    handle={\r\n                      <span\r\n                        className=\"custom-resizer\"\r\n                        style={{\r\n                          cursor: \"col-resize\",\r\n                          width: 8,\r\n                          height: \"100%\",\r\n                          display: \"inline-block\",\r\n                          position: \"absolute\",\r\n                          right: 0,\r\n                          top: 0,\r\n                        }}\r\n                      />\r\n                    }\r\n                    onResizeStop={(e, data) =>\r\n                      handleResize(column.key, data.size.width)\r\n                    }\r\n                    minConstraints={[90, 30]}\r\n                    maxConstraints={[200, 30]}\r\n                  >\r\n                    <div\r\n                      className=\"virtualized-header-cell\"\r\n                      style={{\r\n                        width: column.width,\r\n                        minWidth: 90,\r\n                        maxWidth: 200,\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        position: \"relative\",\r\n                        userSelect: \"none\",\r\n                        paddingRight: 8,\r\n                        boxSizing: \"border-box\",\r\n                      }}\r\n                      title={column.header}\r\n                    >\r\n                      {column.header}\r\n                    </div>\r\n                  </ResizableBox>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"virtualized-body\">\r\n                <AutoSizer>\r\n                  {({ height, width }) => (\r\n                    <List\r\n                      width={width}\r\n                      height={height - 10}\r\n                      rowCount={paginatedData.length}\r\n                      rowHeight={cache.rowHeight}\r\n                      deferredMeasurementCache={cache}\r\n                      rowRenderer={rowRenderer}\r\n                      overscanRowCount={5}\r\n                    />\r\n                  )}\r\n                </AutoSizer>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Pagination Controls */}\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              totalItems={responseData.length}\r\n              itemsPerPage={itemsPerPage}\r\n              onPageChange={handlePageChange}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"no-data-message\">No response data available.</div>\r\n        )}\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default SuccessModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./massupload.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\nimport SuccessModal from \"../../components/Modals/SuccessModal\";\r\nimport {\r\n  MSG_TEMPLATE_OPERATION_MISMATCH,\r\n  MSG_NO_DATA_TO_SUBMIT,\r\n  MSG_INVALID_OPERATION_TYPE,\r\n  MSG_UPLOAD_FAILED_CONTACT_ADMIN,\r\n  MSG_NO_SHEET_DATA,\r\n  MSG_UPLOAD_FAILED,\r\n  MSG_FILE_VALIDATED_SUCCESS,\r\n  MSG_WIDGET_RESET_SUCCESS,\r\n  MSG_UPLOAD_SUCCESS,\r\n  MSG_OPERATION_CHNAGED,\r\n} from \"../../utils/toastMessages\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadItemStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/connectItemDocuments\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) {\r\n          // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n          return;\r\n        }\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  }\r\n  // Add this as a new condition in transformSheetDataWithMappings after operation 3 but before the else branch\r\n  else if (operationType === \"4\") {\r\n    console.log(\"Processing Physical Product-Document data for operation 4\");\r\n\r\n    // Transform each row into the required format for connectItemDocuments\r\n    const connectItemDocuments = sheetData.map((row) => {\r\n      // Create base item structure\r\n      const item = {\r\n        PartType: \"\",\r\n        PartNumber: \"\",\r\n        PartRevision: \"\",\r\n        DocumentType: \"\",\r\n        DocumentName: \"\",\r\n        DocumentRevision: \"\",\r\n        RelationshipType: \"\",\r\n        BOSAttributes: {},\r\n      };\r\n      // Helper function to normalize field names for comparison\r\n      const normalizeFieldName = (name) => {\r\n        if (!name) return \"\";\r\n        return name.toLowerCase().replace(/\\s+/g, \"\");\r\n      };\r\n\r\n      // Root-level field mapping\r\n      const rootFieldMapping = {\r\n        parttype: \"PartType\",\r\n        part_type: \"PartType\",\r\n        einnumber: \"PartNumber\",\r\n        ein_number: \"PartNumber\",\r\n        partnumber: \"PartNumber\",\r\n        part_number: \"PartNumber\",\r\n        partrevision: \"PartRevision\",\r\n        part_revision: \"PartRevision\",\r\n        documenttype: \"DocumentType\",\r\n        document_type: \"DocumentType\",\r\n        documentname: \"DocumentName\",\r\n        document_name: \"DocumentName\",\r\n        documentrevision: \"DocumentRevision\",\r\n        document_revision: \"DocumentRevision\",\r\n        relationshiptype: \"RelationshipType\",\r\n        relationship_type: \"RelationshipType\",\r\n      };\r\n\r\n      // Map row data to item properties\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (excludedColumns.includes(columnName)) return;\r\n        if (!columnMappings[columnName]) return;\r\n        if (value === undefined || value === null || value === \"\") return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === uiLabelBackendName ||\r\n            attr.backendName === uiLabelBackendName\r\n        );\r\n\r\n        const backendName = attribute?.backendName || uiLabelBackendName;\r\n        const group = attribute?.group;\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendName} (${group})`\r\n        );\r\n\r\n        // First check if it maps to a root-level field\r\n        const normalizedName = normalizeFieldName(backendName);\r\n        if (rootFieldMapping[normalizedName]) {\r\n          const fieldName = rootFieldMapping[normalizedName];\r\n          item[fieldName] = value;\r\n          console.log(`Mapped to root field: ${fieldName} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // Handle BOS attributes\r\n        const bosSpecialAttrs = [\r\n          \"Print On Purchase Order Required\",\r\n          \"Print On Work Order Required\",\r\n          \"Work Order Document Required\",\r\n          \"Print On report Order Required\",\r\n        ];\r\n\r\n        // Check if it's a BOS attribute by name\r\n        if (\r\n          bosSpecialAttrs.some(\r\n            (attr) => normalizeFieldName(attr) === normalizedName\r\n          )\r\n        ) {\r\n          // Find the original name format\r\n          const originalAttr =\r\n            bosSpecialAttrs.find(\r\n              (attr) => normalizeFieldName(attr) === normalizedName\r\n            ) || backendName;\r\n\r\n          item.BOSAttributes[originalAttr] = value;\r\n          console.log(`Added BOS attribute: ${originalAttr} = \"${value}\"`);\r\n          return;\r\n        }\r\n\r\n        // If it has BOS Attributes group, add it to BOSAttributes\r\n        if (group === \"BOS Attributes\") {\r\n          item.BOSAttributes[backendName] = value;\r\n          console.log(\r\n            `Added group-based BOS attribute: ${backendName} = \"${value}\"`\r\n          );\r\n          return;\r\n        }\r\n\r\n        // For anything else, try to find a match in root fields\r\n        for (const [rootKey, fieldName] of Object.entries(rootFieldMapping)) {\r\n          if (normalizedName.includes(rootKey.toLowerCase())) {\r\n            item[fieldName] = value;\r\n            console.log(\r\n              `Partial match to root field: ${fieldName} = \"${value}\"`\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Last resort - add to root level\r\n        console.log(\r\n          `Unmatched field added at root level: ${backendName} = \"${value}\"`\r\n        );\r\n        item[backendName] = value;\r\n      });\r\n\r\n      // Log the final item for debugging\r\n      console.log(\"Final processed item:\", JSON.stringify(item, null, 2));\r\n      return item;\r\n    });\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < connectItemDocuments.length; i += CHUNK_SIZE) {\r\n      chunks.push(connectItemDocuments.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    // Log a sample item for verification\r\n    if (connectItemDocuments.length > 0) {\r\n      console.log(\r\n        \"Sample connectItemDocument structure:\",\r\n        JSON.stringify(connectItemDocuments[0], null, 2)\r\n      );\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: connectItemDocuments.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isConnectItemDocumentsPayload: true,\r\n      connectItemDocuments: connectItemDocuments,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // Modify getPathForAttribute to handle EBOM Attributes for operation type 2\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      // Special handling for collabSpace in operation 2 - ADD THIS FIRST\r\n      if (operationType === \"2\" && backendName === \"collabSpace\") {\r\n        console.log(\"Operation 2: collabSpace explicitly placed at root level\");\r\n        return \"collabSpace\"; // Keep at root level\r\n      }\r\n\r\n      // Special case for level - always place at root level for operation type 2\r\n      if (operationType === \"2\" && backendName === \"Level\") {\r\n        console.log(\r\n          \"'Level' identified as EBOM Attribute but placing at root level\"\r\n        );\r\n        return \"Level\";\r\n      }\r\n\r\n      // Check for other EBOM Attributes for operation type 2\r\n      if (\r\n        operationType === \"2\" &&\r\n        attributeGroupMap[backendName] === \"EBOM Attributes\" &&\r\n        backendName !== \"Level\" // Make sure level doesn't go into instanceAttributes\r\n      ) {\r\n        console.log(\r\n          `${backendName} identified as EBOM Attribute, placing in instanceAttributes`\r\n        );\r\n        return `instanceAttributes.${backendName}`;\r\n      }\r\n\r\n      // Rest of existing code remains the same...\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    // Define the constant for MBOM attributes group key\r\n    const MBOM_GROUP_KEY = \"MBOMAttributes__b0e36f7ffa8f4e42b8be46904dad3047\";\r\n\r\n    // Modify the existing transformation logic for operation type 2\r\n    if (operationType === \"2\") {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {\r\n          instanceAttributes: {\r\n            customerAttributes: {\r\n              [MBOM_GROUP_KEY]: {},\r\n            },\r\n          },\r\n        };\r\n\r\n        // Handle type first based on Physical Product/Raw Material column\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow.type = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"VPMReference\"; // Default to VPMReference\r\n        }\r\n\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) return;\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n          const attribute = mappedData.find(\r\n            (attr) =>\r\n              attr.uiLabel === uiLabelBackendName ||\r\n              attr.backendName === uiLabelBackendName\r\n          );\r\n          const backendName = attribute?.backendName || uiLabelBackendName;\r\n          const group = attribute?.group;\r\n\r\n          // Handle different types of attributes\r\n          if (backendName === \"Level\") {\r\n            // Level goes to root\r\n            transformedRow[\"level\"] = value;\r\n          } else if (backendName === \"collabSpaceTitle\") {\r\n            // Handle collabspace mapping\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            }\r\n          } else if (backendName === \"classificationType\") {\r\n            transformedRow[\"classificationType\"] = value;\r\n          } else if (group === \"EBOM Attributes\") {\r\n            // Special handling for EBOM attributes\r\n            if (backendName === \"name\" || backendName === \"quantity\") {\r\n              // These go directly in instanceAttributes\r\n              transformedRow.instanceAttributes[backendName] = value;\r\n            } else {\r\n              // Other EBOM attributes go into the customerAttributes.MBOMAttributes group\r\n              transformedRow.instanceAttributes.customerAttributes[\r\n                MBOM_GROUP_KEY\r\n              ][backendName] = value;\r\n            }\r\n          } else if (backendName === \"title\" || backendName === \"description\") {\r\n            // Initialize attributes object if not exists\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            transformedRow.attributes[backendName] = value;\r\n          } else if (\r\n            columnName === \"EIN Number\" ||\r\n            backendName === \"Part Number\"\r\n          ) {\r\n            // Handle EIN Number/Part Number\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseng:EnterpriseReference\"]) {\r\n              transformedRow.attributes[\"dseng:EnterpriseReference\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseng:EnterpriseReference\"].partNumber =\r\n              value;\r\n          } else {\r\n            // Handle other enterprise attributes\r\n            if (!transformedRow.attributes) {\r\n              transformedRow.attributes = {};\r\n            }\r\n            if (!transformedRow.attributes[\"dseno:EnterpriseAttributes\"]) {\r\n              transformedRow.attributes[\"dseno:EnterpriseAttributes\"] = {};\r\n            }\r\n            transformedRow.attributes[\"dseno:EnterpriseAttributes\"][\r\n              backendName\r\n            ] = value;\r\n          }\r\n        });\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      // Rest of your existing chunking logic...\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    } else {\r\n      const transformedItems = sheetData.map((row) => {\r\n        const transformedRow = {};\r\n\r\n        // Add instanceAttributes object for operation 2\r\n        if (operationType === \"2\") {\r\n          transformedRow.instanceAttributes = {};\r\n        }\r\n\r\n        // The rest of your existing transformation code...\r\n        Object.entries(row).forEach(([columnName, value]) => {\r\n          if (excludedColumns.includes(columnName)) {\r\n            // console.log(`Skipping excluded column \"${columnName}\" in payload`);\r\n            return;\r\n          }\r\n          if (!columnMappings[columnName]) return;\r\n\r\n          const uiLabelBackendName = columnMappings[columnName];\r\n\r\n          const systemAttributeMappings = {\r\n            Title: \"title\",\r\n            Description: \"description\",\r\n            \"Collaborative Space\": \"collabSpaceTitle\",\r\n            \"Collab Space\": \"collabSpaceTitle\",\r\n            Type: \"type\",\r\n          };\r\n\r\n          const backendName =\r\n            systemAttributeMappings[uiLabelBackendName] ||\r\n            mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n              ?.backendName ||\r\n            uiLabelBackendName;\r\n\r\n          // **MOVE THIS CODE BLOCK UP HERE**\r\n          // Handle collabspace title and name mapping immediately\r\n          if (\r\n            (operationType === \"1\" || operationType === \"2\") &&\r\n            backendName === \"collabSpaceTitle\"\r\n          ) {\r\n            // Set the title as usual\r\n            transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n            // Also set the collabspace name using the mapping\r\n            if (collabMapping && collabMapping[value]) {\r\n              transformedRow[\"collabSpace\"] = collabMapping[value];\r\n              console.log(\r\n                `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n              );\r\n            } else {\r\n              console.warn(`No mapping found for collabspace title: ${value}`);\r\n            }\r\n            // Continue to the next attribute\r\n            return;\r\n          }\r\n\r\n          const path = getPathForAttribute(backendName, columnName);\r\n\r\n          if (\r\n            backendName === \"title\" ||\r\n            backendName === \"description\" ||\r\n            backendName.toLowerCase() === \"collabspace\"\r\n          ) {\r\n            console.log(`Placing ${backendName} at path: ${path}`);\r\n          }\r\n\r\n          if (!path) return;\r\n\r\n          const pathParts = path.split(\".\");\r\n          let current = transformedRow;\r\n\r\n          for (let i = 0; i < pathParts.length - 1; i++) {\r\n            const part = pathParts[i];\r\n            if (!current[part]) {\r\n              current[part] = {};\r\n            }\r\n            current = current[part];\r\n          }\r\n\r\n          current[pathParts[pathParts.length - 1]] = value;\r\n\r\n          // Special handling for collabspace in operation 2\r\n        });\r\n\r\n        if (operationType === \"1\") {\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n        }\r\n\r\n        // Special handling for operation 2 default values\r\n        if (operationType === \"2\") {\r\n          // Set default type for Product Structure if not specified\r\n          const productTypeColumn = Object.keys(row).find(\r\n            (key) =>\r\n              key.toLowerCase().includes(\"physical product\") ||\r\n              key.toLowerCase().includes(\"raw material\")\r\n          );\r\n\r\n          if (productTypeColumn && row[productTypeColumn]) {\r\n            const productType = row[productTypeColumn].toLowerCase().trim();\r\n            transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n              ? \"VPMReference\"\r\n              : productType.includes(\"raw material\")\r\n              ? \"Raw_Material\"\r\n              : \"\";\r\n\r\n            console.log(\r\n              `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n            );\r\n          }\r\n\r\n          // Make sure instanceAttributes exists even if no EBOM attributes were found\r\n          if (!transformedRow.instanceAttributes) {\r\n            transformedRow.instanceAttributes = {};\r\n          }\r\n        }\r\n\r\n        return transformedRow;\r\n      });\r\n\r\n      if (transformedItems.length > 0) {\r\n        console.log(\r\n          \"Sample transformed item structure:\",\r\n          JSON.stringify(transformedItems[0], null, 2)\r\n        );\r\n      }\r\n\r\n      const CHUNK_SIZE = 1000;\r\n      const chunks = [];\r\n\r\n      for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n        chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n      }\r\n\r\n      return {\r\n        chunks,\r\n        totalChunks: chunks.length,\r\n        totalItems: transformedItems.length,\r\n        originalData: sheetData,\r\n        mappings: columnMappings,\r\n        isDocumentPayload: false,\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const excludedColumns = [\"Physical Product/Raw Material\"];\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    // Skip excluded columns\r\n    if (excludedColumns.includes(columnName)) {\r\n      console.log(`Column \"${columnName}\" is excluded from mapping`);\r\n      return;\r\n    }\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\n// Add this function near the top of your file, outside the MassUpload component\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast, showInfoToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  // const handleOperationChange = (value) => {\r\n  //   console.log(\"Operation selected:\", value);\r\n  //   setOperationChoice(value);\r\n  //   handleRefreshForCurrentOperation(value);\r\n  // };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n\r\n    // If we already had a previous operation selected and files uploaded\r\n    if (operationChoice && formattedData) {\r\n      console.log(\"Operation changed - resetting uploaded file\");\r\n\r\n      // Reset file-related states\r\n      setErrors([]);\r\n      setColumnHeaders([]);\r\n      setMandatoryAttributes([]);\r\n      setFormattedData(null);\r\n\r\n      // Clear the file uploader\r\n      if (fileUploaderRef.current) {\r\n        fileUploaderRef.current.handleClearFiles(true); // Pass true to skip success toast\r\n      }\r\n\r\n      // Optional: Show toast informing the user\r\n      showInfoToast(MSG_OPERATION_CHNAGED);\r\n    }\r\n\r\n    // Update operation choice and refresh mapping\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n      globalCollabSpaceNames\r\n    );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx]  globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames) &&\r\n      globalCollabSpaceTitles.length === globalCollabSpaceNames.length\r\n    ) {\r\n      const mapping = {};\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        await handleRefreshForCurrentOperation(operationChoice);\r\n\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping // Add this parameter\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(MSG_FILE_VALIDATED_SUCCESS);\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(MSG_TEMPLATE_OPERATION_MISMATCH);\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(MSG_WIDGET_RESET_SUCCESS);\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled =\r\n    columnHeaders.length === 0 || errors.length > 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(MSG_NO_DATA_TO_SUBMIT);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(MSG_INVALID_OPERATION_TYPE);\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = [];\r\n      let hasErrors = false;\r\n\r\n      // For document payload (operation 3)\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          console.log(`Processing ${docChunks.length} document chunks`);\r\n\r\n          // Add user info if available (similar to other operations)\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            console.log(\r\n              `Sending document chunk ${i + 1} of ${docChunks.length}`\r\n            );\r\n\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            console.log(`Document chunk ${i + 1} response:`, response);\r\n\r\n            if (response.data) {\r\n              if (response.data.success === true) {\r\n                successCount++;\r\n                if (Array.isArray(response.data.responses)) {\r\n                  allResponses = [...allResponses, ...response.data.responses];\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\r\n                  `Document API returned success: false`,\r\n                  response.data\r\n                );\r\n              }\r\n            }\r\n\r\n            if (i % 5 === 0 || i === docChunks.length - 1) {\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          hasErrors = true;\r\n          failureCount++;\r\n          console.error(\"Document upload failed:\", error);\r\n        }\r\n      } else {\r\n        // For operations 1, 2, and 4\r\n        // Create appropriate user info object based on operation type\r\n        const userInfo = {\r\n          // Include user information for operations 1 and 2\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.email\r\n            ? { email: userDetails.email }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && userDetails?.login\r\n            ? { userId: userDetails.login }\r\n            : {}),\r\n          ...([\"1\", \"2\"].includes(operationChoice) && securityContext\r\n            ? { securityContext: securityContext }\r\n            : {}),\r\n          // Add emailNotification flag only for operation 1\r\n          ...([\"1\", \"2\"].includes(operationChoice)\r\n            ? { emailNotification: false }\r\n            : {}),\r\n        };\r\n\r\n        // Check if this is a connectItemDocuments payload (operation 4)\r\n        const { isConnectItemDocumentsPayload, connectItemDocuments } =\r\n          formattedData;\r\n\r\n        if (operationChoice === \"4\" && isConnectItemDocumentsPayload) {\r\n          // User info for operation 4\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // Use connectItemDocuments as the key for the API payload\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                connectItemDocuments: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response for operation 4:`, response);\r\n\r\n              // Process response data (same as other operations)\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation 4 API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(`Chunk ${i + 1} failed for operation 4:`, error);\r\n            }\r\n          }\r\n        } else {\r\n          for (let i = 0; i < chunks.length; i++) {\r\n            try {\r\n              const chunk = chunks[i];\r\n\r\n              // For operation 2, validate that instanceAttributes exist in each item\r\n              if (operationChoice === \"2\") {\r\n                chunk.forEach((item, idx) => {\r\n                  if (!item.instanceAttributes) {\r\n                    item.instanceAttributes = {};\r\n                  }\r\n                });\r\n              }\r\n\r\n              const response = await api.post(endpoint, {\r\n                ...userInfo,\r\n                items: chunk,\r\n              });\r\n\r\n              console.log(`Chunk ${i + 1} response:`, response);\r\n\r\n              // Process response data\r\n              if (response.data) {\r\n                if (response.data.success === true) {\r\n                  successCount++;\r\n                  if (Array.isArray(response.data.responses)) {\r\n                    allResponses = [\r\n                      ...allResponses,\r\n                      ...response.data.responses,\r\n                    ];\r\n                  }\r\n                } else {\r\n                  hasErrors = true;\r\n                  failureCount++;\r\n                  console.error(\r\n                    `Operation ${operationChoice} API returned success: false`,\r\n                    response.data\r\n                  );\r\n                }\r\n              } else {\r\n                hasErrors = true;\r\n                failureCount++;\r\n                console.error(\"Empty response data received\");\r\n              }\r\n            } catch (error) {\r\n              hasErrors = true;\r\n              failureCount++;\r\n              console.error(\r\n                `Chunk ${i + 1} failed for operation ${operationChoice}:`,\r\n                error\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Show results\r\n      setApiResponse(allResponses);\r\n      console.log(\r\n        `Operation ${operationChoice} completed. All responses:`,\r\n        allResponses\r\n      );\r\n\r\n      if (!hasErrors && allResponses.length > 0) {\r\n        showSuccessToast(MSG_UPLOAD_SUCCESS);\r\n        setShowSuccessModal(true);\r\n      } else {\r\n        showErrorToast(MSG_UPLOAD_FAILED_CONTACT_ADMIN);\r\n        setShowSuccessModal(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`${MSG_UPLOAD_FAILED}${error.message || \"Unknown error\"}`);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{\r\n            maxWidth: \"1200px\",\r\n            maxHeight: \"500px\",\r\n            minHeight: \"300px\",\r\n            minWidth: \"300px\",\r\n          }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\">\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                  ],\r\n                }}\r\n              />\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {isSubmitting && <Loader />}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                  onClick={handleOpenSpreadsheetModal}\r\n                  text=\"Manage Spreadsheet Columns\"\r\n                  disabled={manageSpreadsheetDisabled}\r\n                />\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={() => setModalShow(true)}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={mappedAttributes?.dropdownOptions}\r\n        allNLSValues={mappedAttributes?.allNLSValues}\r\n        operationChoice={operationChoice}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          const columnMappings = mappings;\r\n\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes,\r\n              collabMapping\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(MSG_NO_SHEET_DATA);\r\n          }\r\n        }}\r\n      />\r\n\r\n      <SuccessModal\r\n        show={showSuccessModal}\r\n        onHide={() => setShowSuccessModal(false)}\r\n        responseData={apiResponse || []}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n    \r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","defaultLabel","list","hasGroupedOptions","Form","Select","value","group","groupIndex","item","optionIndex","idx","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","err","CustomButton","handleExportErrors","exportData","handleExportExcel","ReusableAlert","_Fragment","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","hasMatchingNLS","warn","normalizedHeader","nls","StaticTable","hasNLS","isMandatory","shouldBeDisabled","attr","columnHeader","backendName","option","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","isEBOMAttribute","isAlreadySelected","matchesAnyNLS","partAttributes","isNotEBOMAttribute","isNotSystemAttribute","allowedBosAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","systemAttributes","groupNLS","controlCenterAttributes","bosAttributes","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","bosNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","currentPage","totalItems","itemsPerPage","onPageChange","totalPages","ceil","start","end","min","from","responseData","setCurrentPage","columnWidths","setColumnWidths","allKeys","add","formatHeaderText","replace","word","toUpperCase","charAt","tooltip","paginatedData","clearAll","colIndex","getItemValue","lowerKey","k","statusValue","statusClass","handleExport","ResizableBox","axis","resizeHandles","handle","right","top","onResizeStop","handleResize","newWidth","minConstraints","maxConstraints","minWidth","maxWidth","justifyContent","userSelect","paddingRight","boxSizing","overscanRowCount","Pagination","newPage","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","excludedColumns","documentItems","rootData","dataelements","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","originalData","mappings","isDocumentPayload","documents","connectItemDocuments","PartType","PartNumber","PartRevision","DocumentType","DocumentName","DocumentRevision","RelationshipType","BOSAttributes","normalizeFieldName","rootFieldMapping","parttype","part_type","einnumber","ein_number","partnumber","part_number","partrevision","part_revision","documenttype","document_type","documentname","document_name","documentrevision","document_revision","relationshiptype","relationship_type","uiLabelBackendName","normalizedName","fieldName","bosSpecialAttrs","originalAttr","rootKey","isConnectItemDocumentsPayload","attributeGroupMap","getPathForAttribute","MBOM_GROUP_KEY","transformedItems","transformedRow","instanceAttributes","customerAttributes","productTypeColumn","productType","partNumber","_ref4","_mappedData$find","Description","Type","path","pathParts","part","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","showSuccessModal","setShowSuccessModal","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","getValue","securityContextValue","handleReset","selectElement","document","querySelector","MSG_WIDGET_RESET_SUCCESS","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxHeight","Stack","gap","direction","MSG_OPERATION_CHNAGED","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","MSG_FILE_VALIDATED_SUCCESS","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","MSG_TEMPLATE_OPERATION_MISMATCH","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","MSG_NO_DATA_TO_SUBMIT","endpoint","MSG_INVALID_OPERATION_TYPE","successCount","failureCount","allResponses","hasErrors","docChunks","userInfo","email","login","userId","api","post","success","responses","emailNotification","items","MSG_UPLOAD_SUCCESS","MSG_UPLOAD_FAILED_CONTACT_ADMIN","MSG_UPLOAD_FAILED","ColumnMappingModal","MSG_NO_SHEET_DATA","SuccessModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader"],"sourceRoot":""}